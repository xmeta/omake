BUILTIN = $(dir $(ROOT)/src/builtin)

#
# Documentation files
#
MAN_BASE_FILES[] =
    $(BUILTIN)/omake_builtin_base.ml
    $(BUILTIN)/omake_builtin_arith.ml
    $(BUILTIN)/omake_builtin_fun.ml
    $(BUILTIN)/omake_builtin_object.ml
    $(BUILTIN)/omake_builtin_file.ml
    $(BUILTIN)/omake_builtin_test.ml

MAN_SYSTEM_FILES[] =
    $(BUILTIN)/omake_builtin_io.ml
    $(BUILTIN)/omake_builtin_io_fun.ml
    $(BUILTIN)/omake_builtin_sys.ml
    $(BUILTIN)/omake_builtin_shell.ml

MAN_PERVASIVES_FILES[] =
    $(LIB)/Pervasives.om

MAN_ROOT_FILES[] =
    $(BUILTIN)/omake_builtin_rule.ml
    $(LIB)/build/Common.om
    $(LIB)/build/C.om
    $(LIB)/build/OCaml.om
    $(LIB)/build/LaTeX.om
    $(BUILTIN)/omake_builtin_target.ml

MAN_BASE_FILES       = $(file $(MAN_BASE_FILES))
MAN_SYSTEM_FILES     = $(file $(MAN_SYSTEM_FILES))
MAN_PERVASIVES_FILES = $(file $(MAN_PERVASIVES_FILES))
MAN_ROOT_FILES       = $(file $(MAN_ROOT_FILES))
MAN_ALL_FILES[] =
    $(MAN_BASE_FILES)
    $(MAN_SYSTEM_FILES)
    $(MAN_PERVASIVES_FILES)
    $(MAN_ROOT_FILES)

########################################################################
# Documentation
#
Shell. +=
   #
   # Extract the text between the following delimiters.
   #
   # \begin{doc}
   # ...
   # \end{doc}
   #
   extract-doc-text(argv) =
      print = false

      awk(b, $(argv))
      case $'\\end\{doc\}'
         print = false
         export
      case $'\\begin\{doc\}'
         print = true
         export
      default
         if $(print)
            println($0)

   remove-leading-comment-text(argv) =
      fsubst()
      case $'^[ \t]*[*#] ?'
         value

   extract-docs(argv) =
      extract-doc-text $(argv) | remove-leading-comment-text

#
# Extract the documentation from the src files.
#
ExtractManDocument(dst, files) =
    tex/$(dst).tex: $(files)
        extract-docs $(files) > $@

ExtractManDocument(omake-base,       $(MAN_BASE_FILES))
ExtractManDocument(omake-system,     $(MAN_SYSTEM_FILES))
ExtractManDocument(omake-pervasives, $(MAN_PERVASIVES_FILES))
ExtractManDocument(omake-root,       $(MAN_ROOT_FILES))

#
# All the TeX files - both generated and the source ones.
#
TEX_FILES[] =
    src/omake-doc
    src/omake-index
    src/omake-examples
    src/omake-detail
    src/omake-build-examples
    src/omake-detail
    src/omake-language-examples
    src/omake-options
    src/omake-language
    src/omake-detail
    src/omake-rules
    tex/omake-base
    tex/omake-system
    tex/omake-pervasives
    tex/omake-root
    src/osh
    src/omake-grammar

TEX_FILES = $(file $(addsuffix .tex, $(TEX_FILES)))

#
# HTML files that will be generated out of the ocaml-doc one
#
HTML_FILES[] =
    omake-doc.css
    omake-contents.html
    omake.html
    omake-quickstart.html
    omake-build-examples.html
    omake-language.html
    omake-detail.html
    omake-language-examples.html
    omake-rules.html
    omake-base.html
    omake-system.html
    omake-shell.html
    omake-pervasives.html
    omake-rule.html
    osh.html
    omake-options.html
    omake-grammar.html
    omake-all-index.html
    omake-var-index.html
    omake-fun-index.html
    omake-obj-index.html
    omake-target-index.html
    omake-references.html
    omake-toc.html
    previous_motif.gif
    next_motif.gif
    contents_motif.gif

HTML_FILES = $(file $(addprefix html/, $(HTML_FILES)))

#
# Generated info files.
#
# XXX: HACK: we do not know how many pieces we'd have. For now we hardcode the number.
#
INFO_FILES = $(file $(addprefix info/omake-doc.info, $(EMPTY) -1 -2 -3 -4 -5 -6 -7 -8))

public.HEVEA = hevea
public.HACHA = hacha
static. =
    HEVEA_DIR =
    HEVEA_OK = $(and $(CheckProg $(HEVEA)), $(CheckProg $(HACHA)))
    if $(HEVEA_OK)
        print($"--- Looking for $(HEVEA) configs... ")
        HEVEA_DIR = $(last $(shell $(HEVEA) -version))
        println($"($(HEVEA_DIR))")
        print($"--- Checking if $(HEVEA_DIR) exists... ")
        if $(test -d $(HEVEA_DIR))
            println($"(yes)")
        else
            println($"(no)")
            HEVEA_OK = false
            export
        export

HEVEA_OPTIONS = -fix -I $(dir src) -I $(dir tex)
HACHA_OPTIONS = -tocter -nolinks

if $(not $(VERBOSE))
    HEVEA_OPTIONS += -s
    export

if $(HEVEA_OK)
    .SUBDIRS: html
        omake-doc.html: $(TEX_FILES)
            $(HEVEA) $(HEVEA_OPTIONS) omake-doc

        $(HTML_FILES): omake-doc.html
            $(HACHA) $(HACHA_OPTIONS) -o omake-toc.html $<

    .SUBDIRS: txt
        omake-doc.txt: $(TEX_FILES)
            $(HEVEA) $(HEVEA_OPTIONS) -text omake-doc

    .SUBDIRS: info
        $(INFO_FILES): $(TEX_FILES)
            rm -f omake-doc.info*
            $(HEVEA) $(HEVEA_OPTIONS) -info omake-doc

    .SUBDIRS: ps
        TEXINPUTS[] += $(dir ../src ../tex $(HEVEA_DIR))

        omake-doc.tex: ../src/omake-doc.tex
            $(symlink $<, $@)

        TEXDEPS[] += $(TEX_FILES)

        LaTeXDocument(omake-doc, omake-doc)

html: html/omake-doc.html $(HTML_FILES)
tex: ps/omake-doc.ps ps/omake-doc.pdf
txt: txt/omake-doc.txt
info: $(INFO_FILES)

clean:
    rm -f {txt,html,info}/*.{hind,h{t,o,f,v,opt}ind,htoc,haux}
    rm -f ps/*.{aux,fls,log,out,{t,o,v,f,opt}ids,ind,toc,ilg,{,v}idx,opts} ps/omake-doc.tex tex/*.tex
