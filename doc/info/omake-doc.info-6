This file has been translated from LaTeX by HeVeA.

Node: Subsection 11-2-1,	Next: Subsection 11-2-2,	Prev: Section 11-2,	Up: Section 11-2
  

11.2.1   Variables
==================
   

Node: Subsection 11-2-2,	Next: Subsection 11-2-3,	Prev: Subsection 11-2-1,	Up: Section 11-2
  

11.2.2   ROOT
=============
 The root directory of
the current project. 

Node: Subsection 11-2-3,	Next: Subsection 11-2-4,	Prev: Subsection 11-2-2,	Up: Section 11-2
  

11.2.3   CWD
============
 The current working
directory (the directory is set for each OMakefile in the project). 

Node: Subsection 11-2-4,	Next: Subsection 11-2-5,	Prev: Subsection 11-2-3,	Up: Section 11-2
  

11.2.4   EMPTY
==============
 The empty string. 

Node: Subsection 11-2-5,	Next: Subsection 11-2-6,	Prev: Subsection 11-2-4,	Up: Section 11-2
  

11.2.5   STDROOT
================
 The name of the
standard installed OMakeroot file. 

Node: Subsection 11-2-6,	Next: Subsection 11-2-7,	Prev: Subsection 11-2-5,	Up: Section 11-2
  

11.2.6   VERBOSE
================
 Whether certain
commands should be verbose (`false' by default). 

Node: Subsection 11-2-7,	Next: Subsection 11-2-8,	Prev: Subsection 11-2-6,	Up: Section 11-2
  

11.2.7   ABORT_ON_COMMAND_ERROR
===============================
 If
set to true, the construction of a target should  be aborted whenever
one of the commands to build it fail. This defaults to true,  and should
normally be left that way.

Node: Subsection 11-2-8,	Next: Subsection 11-2-9,	Prev: Subsection 11-2-7,	Up: Section 11-2
  

11.2.8   SCANNER_MODE
=====================
 This variable
should be defined as one of four values  (defaults to `enabled'). 
  
 enabled  Allow the use of default `.SCANNER' rules. Whenever a rule
   does  not specify a `:scanner:' dependency explicitly, try to find a 
   `.SCANNER' with the same target name. 
 disabled  Never use default `.SCANNER' rules. 
 warning  Allow the use of default `.SCANNER' rules, but print a warning
    whenever one is selected. 
 error  Do not allow the use of default `.SCANNER' rules. If a rule 
   does not specify a `:scanner:' dependency, and there is a default 
   `.SCANNER' rule, the build will terminate abnormally. 
   

Node: Subsection 11-2-9,	Next: Subsection 11-2-10,	Prev: Subsection 11-2-8,	Up: Section 11-2
  

11.2.9   System variables
=========================
  

Node: Subsection 11-2-10,	Next: Subsection 11-2-11,	Prev: Subsection 11-2-9,	Up: Section 11-2
  

11.2.10   INSTALL
=================
 The command to
install a program (`install' on `Unix', `cp' on `Win32'). 

Node: Subsection 11-2-11,	Next: Subsection 11-2-12,	Prev: Subsection 11-2-10,	Up: Section 11-2
  

11.2.11   PATHSEP
=================
 The normal path
separator (`:' on `Unix', `;' on `Win32'). 

Node: Subsection 11-2-12,	Next: Subsection 11-2-13,	Prev: Subsection 11-2-11,	Up: Section 11-2
  

11.2.12   DIRSEP
================
 The normal directory
separator (`/' on `Unix', `\' on `Win32'). 

Node: Subsection 11-2-13,	Next: Subsection 11-2-14,	Prev: Subsection 11-2-12,	Up: Section 11-2
  

11.2.13   EXT_LIB
=================
 File suffix for a
static library (default is `.a' on `Unix', and `.lib' on `Win32'). 

Node: Subsection 11-2-14,	Next: Subsection 11-2-15,	Prev: Subsection 11-2-13,	Up: Section 11-2
  

11.2.14   EXT_OBJ
=================
 File suffix for an
object file (default is `.o' on `Unix', and `.obj' on `Win32'). 

Node: Subsection 11-2-15,	Next: Subsection 11-2-16,	Prev: Subsection 11-2-14,	Up: Section 11-2
  

11.2.15   EXT_ASM
=================
 File suffix for an
assembly file (default is `.s' on `Unix', and `.asm' on `Win32'). 

Node: Subsection 11-2-16,	Next: Section 11-3,	Prev: Subsection 11-2-15,	Up: Section 11-2
  

11.2.16   EXE
=============
 File suffix for
executables (default is empty for `Unix', and `.exe' on `Win32' and
`Cygwin'). 

Node: Section 11-3,	Next: Subsection 11-3-1,	Prev: Section 11-2,	Up: Chapter 11
  

11.3   Building C programs
*=*=*=*=*=*=*=*=*=*=*=*=*=

  
  omake provides extensive support for building C programs.
* Menu:

* Subsection 11-3-1::	C configuration variables
* Subsection 11-3-2::	CC
* Subsection 11-3-3::	CXX
* Subsection 11-3-4::	CPP
* Subsection 11-3-5::	CFLAGS
* Subsection 11-3-6::	CXXFLAGS
* Subsection 11-3-7::	INCLUDES
* Subsection 11-3-8::	LIBS
* Subsection 11-3-9::	AS
* Subsection 11-3-10::	ASFLAGS
* Subsection 11-3-11::	AR
* Subsection 11-3-12::	AROUT
* Subsection 11-3-13::	LD
* Subsection 11-3-14::	LDFLAGS
* Subsection 11-3-15::	YACC
* Subsection 11-3-16::	LEX
* Subsection 11-3-17::	CGeneratedFiles
* Subsection 11-3-18::	LocalCGeneratedFiles
* Subsection 11-3-19::	StaticCLibrary
* Subsection 11-3-20::	StaticCLibraryCopy
* Subsection 11-3-21::	StaticCLibraryInstall
* Subsection 11-3-22::	StaticCObject
* Subsection 11-3-23::	StaticCObjectCopy
* Subsection 11-3-24::	StaticCObjectInstall
* Subsection 11-3-25::	CProgram
* Subsection 11-3-26::	CProgramCopy
* Subsection 11-3-27::	CProgramInstall
* Subsection 11-3-28::	CXXProgram
* Subsection 11-3-29::	CXXProgramInstall


Node: Subsection 11-3-1,	Next: Subsection 11-3-2,	Prev: Section 11-3,	Up: Section 11-3
  

11.3.1   C configuration variables
==================================
  
  The following variables can be redefined in your project.

Node: Subsection 11-3-2,	Next: Subsection 11-3-3,	Prev: Subsection 11-3-1,	Up: Section 11-3
  

11.3.2   CC
===========
 The name of the C
compiler (on `Unix' it defaults to `gcc' when `gcc' is present and  to
`cc' otherwise; on `Win32' defaults to `cl /nologo'). 

Node: Subsection 11-3-3,	Next: Subsection 11-3-4,	Prev: Subsection 11-3-2,	Up: Section 11-3
  

11.3.3   CXX
============
 The name of the C++
compiler (on `Unix' it defaults to `gcc' when `gcc' is present  and to
`c'++ otherwise; on `Win32' defaults to `cl /nologo'). 

Node: Subsection 11-3-4,	Next: Subsection 11-3-5,	Prev: Subsection 11-3-3,	Up: Section 11-3
  

11.3.4   CPP
============
 The name of the C
preprocessor (defaults to `cpp' on `Unix', and `cl /E' on `Win32'). 

Node: Subsection 11-3-5,	Next: Subsection 11-3-6,	Prev: Subsection 11-3-4,	Up: Section 11-3
  

11.3.5   CFLAGS
===============
 Compilation flags to
pass to the C compiler (default empty on `Unix', and `/DWIN32'  on
`Win32'). 

Node: Subsection 11-3-6,	Next: Subsection 11-3-7,	Prev: Subsection 11-3-5,	Up: Section 11-3
  

11.3.6   CXXFLAGS
=================
 Compilation flags
to pass to the C++ compiler (default empty on `Unix', and `/DWIN32'  on
`Win32'). 

Node: Subsection 11-3-7,	Next: Subsection 11-3-8,	Prev: Subsection 11-3-6,	Up: Section 11-3
  

11.3.7   INCLUDES
=================
 Additional
directories that specify the search path to the C and C++ compilers
(default is `.').  The directories are passed to the C and C++ compilers
with the `-I' option.  The include path with `-I' prefixes is defined in
the `PREFIXED_INCLUDES' variable. 

Node: Subsection 11-3-8,	Next: Subsection 11-3-9,	Prev: Subsection 11-3-7,	Up: Section 11-3
  

11.3.8   LIBS
=============
 Additional libraries
needed when building a program (default is empty). 

Node: Subsection 11-3-9,	Next: Subsection 11-3-10,	Prev: Subsection 11-3-8,	Up: Section 11-3
  

11.3.9   AS
===========
 The name of the
assembler (defaults to `as' on `Unix', and `ml' on `Win32'). 

Node: Subsection 11-3-10,	Next: Subsection 11-3-11,	Prev: Subsection 11-3-9,	Up: Section 11-3
  

11.3.10   ASFLAGS
=================
 Flags to pass to
the assembler (default is empty on `Unix', and `/c /coff' on `Win32'). 

Node: Subsection 11-3-11,	Next: Subsection 11-3-12,	Prev: Subsection 11-3-10,	Up: Section 11-3
  

11.3.11   AR
============
 The name of the program
to create static libraries (defaults to `ar cq' on `Unix',  and `lib' on
`Win32'). 

Node: Subsection 11-3-12,	Next: Subsection 11-3-13,	Prev: Subsection 11-3-11,	Up: Section 11-3
  

11.3.12   AROUT
===============
 The option string
that specifies the output file for `AR'. 

Node: Subsection 11-3-13,	Next: Subsection 11-3-14,	Prev: Subsection 11-3-12,	Up: Section 11-3
  

11.3.13   LD
============
 The name of the linker
(defaults to `ld' on `Unix', and `cl' on `Win32'). 

Node: Subsection 11-3-14,	Next: Subsection 11-3-15,	Prev: Subsection 11-3-13,	Up: Section 11-3
  

11.3.14   LDFLAGS
=================
 Options to pass to
the linker (default is empty). 

Node: Subsection 11-3-15,	Next: Subsection 11-3-16,	Prev: Subsection 11-3-14,	Up: Section 11-3
  

11.3.15   YACC
==============
 The name of the `yacc'
parser generator (default is `yacc' on `Unix', empty on `Win32'). 

Node: Subsection 11-3-16,	Next: Subsection 11-3-17,	Prev: Subsection 11-3-15,	Up: Section 11-3
  

11.3.16   LEX
=============
 The name of the `lex'
lexer generator (default is `lex' on `Unix', empty on `Win32'). 

Node: Subsection 11-3-17,	Next: Subsection 11-3-18,	Prev: Subsection 11-3-16,	Up: Section 11-3
  

11.3.17   CGeneratedFiles
=========================
 

Node: Subsection 11-3-18,	Next: Subsection 11-3-19,	Prev: Subsection 11-3-17,	Up: Section 11-3
  

11.3.18   LocalCGeneratedFiles
==============================
 
<<
  CGeneratedFiles(files)
  LocalCGeneratedFiles(files)
>>
  
  The `CGeneratedFiles' and `LocalCGeneratedFiles' functions specify
files that need to be generated before any C files are scanned for
dependencies. For example, if `config.h' and `inputs.h' are both
generated files, specify: 
<<
  CGeneratedFiles(config.h inputs.h)
>>
  
  The `CGeneratedFiles' function is global --- its arguments will be
generated before any C files anywhere in the project are scanned for
dependencies. The `LocalCGeneratedFiles' function follows the normal
scoping rules of OMake.

Node: Subsection 11-3-19,	Next: Subsection 11-3-20,	Prev: Subsection 11-3-18,	Up: Section 11-3
  

11.3.19   StaticCLibrary
========================

  The `StaticCLibrary' builds a static library.
  `StaticCLibrary(<target>, <files>)'
  The `<target>' does not include the library suffix, and The `<files>'
list does not include the object suffix. These are obtained from the
`EXT_LIB' and `EXT_OBJ' variables.
  This function returns the library filename.
  The following command builds the library `libfoo.a' from the files
`a.o b.o c.o' on `Unix', or the library `libfoo.lib' from the files
`a.obj b.obj c.obj' on `Win32'.
<<
  StaticCLibrary(libfoo, a b c)
  .DEFAULT: $(StaticCLibrary libbar, a b c d)
>>

Node: Subsection 11-3-20,	Next: Subsection 11-3-21,	Prev: Subsection 11-3-19,	Up: Section 11-3
  

11.3.20   StaticCLibraryCopy
============================

  The `StaticCLibraryCopy' function copies the static library to an
install location.
  `StaticCLibraryCopy(<tag>, <dir>, <lib>)'
  The `<tag>' is the name of a target (typically a `.PHONY' target); the
`<dir>' is the installation directory, and `<lib>' is the library to be
copied (without the library suffix).
  This function returns the filename of the library in the target
directory.
  For example, the following code copies the library `libfoo.a' to the
`/usr/lib' directory.
<<
  .PHONY: install
  
  StaticCLibraryCopy(install, /usr/lib, libfoo)
>>

Node: Subsection 11-3-21,	Next: Subsection 11-3-22,	Prev: Subsection 11-3-20,	Up: Section 11-3
  

11.3.21   StaticCLibraryInstall
===============================

  The `StaticCLibraryInstall' function builds a library, and sets the
install location in one step. It returns the filename of the library in
the target directory.
  `StaticCLibraryInstall(<tag>, <dir>, <libname>, <files>)'
<<
  StaticCLibraryInstall(install, /usr/lib, libfoo, a b c)
>>

Node: Subsection 11-3-22,	Next: Subsection 11-3-23,	Prev: Subsection 11-3-21,	Up: Section 11-3
  

11.3.22   StaticCObject
=======================
 

Node: Subsection 11-3-23,	Next: Subsection 11-3-24,	Prev: Subsection 11-3-22,	Up: Section 11-3
  

11.3.23   StaticCObjectCopy
===========================
 

Node: Subsection 11-3-24,	Next: Subsection 11-3-25,	Prev: Subsection 11-3-23,	Up: Section 11-3
  

11.3.24   StaticCObjectInstall
==============================

  These functions mirror the `StaticCLibrary', `StaticCLibraryCopy', and
`StaticCLibraryInstall' functions, but they build an object file (a `.o'
file on `Unix', and a `.obj' file on `Win32'). 

Node: Subsection 11-3-25,	Next: Subsection 11-3-26,	Prev: Subsection 11-3-24,	Up: Section 11-3
  

11.3.25   CProgram
==================

  The `CProgram' function builds a C program from a set of object files
and libraries.
  `CProgram(<name>, <files>)'
  The `<name>' argument specifies the name of the program to be built;
the `<files>' argument specifies the files to be linked. The function
returns the filename of the executable.
  Additional options can be passed through the following variables. 
  
 CFLAGS  Flags used by the C compiler during the link step. 
 LDFLAGS  Flags to pass to the loader. 
 LIBS  Additional libraries to be linked. 
  
  For example, the following code specifies that the program `foo' is to
be produced by linking the files `bar.o' and `baz.o' and libraries
`libfoo.a'.
<<
  section
     LIBS = libfoo$(EXT_LIB)
     CProgram(foo, bar baz)
>>

Node: Subsection 11-3-26,	Next: Subsection 11-3-27,	Prev: Subsection 11-3-25,	Up: Section 11-3
  

11.3.26   CProgramCopy
======================

  The `CProgramCopy' function copies a file to an install location.
  `CProgramCopy(<tag>, <dir>, <program>)'
<<
  CProgramCopy(install, /usr/bin, foo)
>>

Node: Subsection 11-3-27,	Next: Subsection 11-3-28,	Prev: Subsection 11-3-26,	Up: Section 11-3
  

11.3.27   CProgramInstall
=========================

  The `CProgramInstall' function specifies a program to build, and a
location to install, simultaneously.
  `CProgramInstall(<tag>, <dir>, <name>, <files>)'
<<
  section
     LIBS = libfoo$(EXT_LIB)
     CProgramInstall(install, /usr/bin, foo, bar baz)
>>

Node: Subsection 11-3-28,	Next: Subsection 11-3-29,	Prev: Subsection 11-3-27,	Up: Section 11-3
  

11.3.28   CXXProgram
====================
 

Node: Subsection 11-3-29,	Next: Section 11-4,	Prev: Subsection 11-3-28,	Up: Section 11-3
  

11.3.29   CXXProgramInstall
===========================

  The `CXXProgram' and `CXXProgramInstall' functions are equivalent to
their C counterparts, except that would use `$(CXX)' and `$(CXXFLAGS)'
for linking instead of `$(CC)' and `$(CFLAGS)'. 

Node: Section 11-4,	Next: Subsection 11-4-1,	Prev: Section 11-3,	Up: Chapter 11
  

11.4   Building OCaml programs
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=

  
* Menu:

* Subsection 11-4-1::	Variables for OCaml programs
* Subsection 11-4-2::	USE_OCAMLFIND
* Subsection 11-4-3::	OCAMLC
* Subsection 11-4-4::	OCAMLOPT
* Subsection 11-4-5::	CAMLP4
* Subsection 11-4-6::	OCAMLLEX
* Subsection 11-4-7::	OCAMLLEXFLAGS
* Subsection 11-4-8::	OCAMLYACC
* Subsection 11-4-9::	OCAMLDEP
* Subsection 11-4-10::	OCAMLMKTOP
* Subsection 11-4-11::	OCAMLLINK
* Subsection 11-4-12::	OCAMLOPTLINK
* Subsection 11-4-13::	OCAMLINCLUDES
* Subsection 11-4-14::	OCAMLFIND
* Subsection 11-4-15::	OCAMLFINDFLAGS
* Subsection 11-4-16::	OCAMLPACKS
* Subsection 11-4-17::	BYTE_ENABLED
* Subsection 11-4-18::	NATIVE_ENABLED
* Subsection 11-4-19::	OCaml command flags
* Subsection 11-4-20::	OCAMLDEPFLAGS
* Subsection 11-4-21::	OCAMLPPFLAGS
* Subsection 11-4-22::	OCAMLCFLAGS
* Subsection 11-4-23::	OCAMLOPTFLAGS
* Subsection 11-4-24::	OCAMLFLAGS
* Subsection 11-4-25::	OCAML_BYTE_LINK_FLAGS
* Subsection 11-4-26::	OCAML_NATIVE_LINK_FLAGS
* Subsection 11-4-27::	OCAML_LINK_FLAGS
* Subsection 11-4-28::	Library variables
* Subsection 11-4-29::	OCAML_LIBS
* Subsection 11-4-30::	OCAML_OTHER_LIBS
* Subsection 11-4-31::	OCAML_CLIBS
* Subsection 11-4-32::	OCAML_LIB_FLAGS
* Subsection 11-4-33::	OCamlGeneratedFiles
* Subsection 11-4-34::	LocalOCamlGeneratedFiles
* Subsection 11-4-35::	OCamlLibrary
* Subsection 11-4-36::	ABORT_ON_DEPENDENCY_ERRORS
* Subsection 11-4-37::	OCamlPackage
* Subsection 11-4-38::	OCamlLibraryCopy
* Subsection 11-4-39::	OCamlLibraryInstall
* Subsection 11-4-40::	OCamlProgram
* Subsection 11-4-41::	OCamlProgramCopy
* Subsection 11-4-42::	OCamlProgramInstall


Node: Subsection 11-4-1,	Next: Subsection 11-4-2,	Prev: Section 11-4,	Up: Section 11-4
  

11.4.1   Variables for OCaml programs
=====================================
  
  The following variables can be redefined in your project. 

Node: Subsection 11-4-2,	Next: Subsection 11-4-3,	Prev: Subsection 11-4-1,	Up: Section 11-4
  

11.4.2   USE_OCAMLFIND
======================
 Whether to
use the `ocamlfind' utility (default `false\') 

Node: Subsection 11-4-3,	Next: Subsection 11-4-4,	Prev: Subsection 11-4-2,	Up: Section 11-4
  

11.4.3   OCAMLC
===============
 The OCaml bytecode
compiler (default `ocamlc.opt' if it exists  and `USE_OCAMLFIND' is not
set, otherwise `ocamlc'). 

Node: Subsection 11-4-4,	Next: Subsection 11-4-5,	Prev: Subsection 11-4-3,	Up: Section 11-4
  

11.4.4   OCAMLOPT
=================
 The OCaml
native-code compiler (default `ocamlopt.opt' if it  exists and
`USE_OCAMLFIND' is not set, otherwise `ocamlopt'). 

Node: Subsection 11-4-5,	Next: Subsection 11-4-6,	Prev: Subsection 11-4-4,	Up: Section 11-4
  

11.4.5   CAMLP4
===============
 The `camlp4'
preprocessor (default `camlp4'). 

Node: Subsection 11-4-6,	Next: Subsection 11-4-7,	Prev: Subsection 11-4-5,	Up: Section 11-4
  

11.4.6   OCAMLLEX
=================
 The OCaml lexer
generator (default `ocamllex'). 

Node: Subsection 11-4-7,	Next: Subsection 11-4-8,	Prev: Subsection 11-4-6,	Up: Section 11-4
  

11.4.7   OCAMLLEXFLAGS
======================
 The flags to
pass to `ocamllex' (default `-q'). 

Node: Subsection 11-4-8,	Next: Subsection 11-4-9,	Prev: Subsection 11-4-7,	Up: Section 11-4
  

11.4.8   OCAMLYACC
==================
 The OCaml parser
generator (default `ocamlyacc'). 

Node: Subsection 11-4-9,	Next: Subsection 11-4-10,	Prev: Subsection 11-4-8,	Up: Section 11-4
  

11.4.9   OCAMLDEP
=================
 The OCaml
dependency analyzer (default `ocamldep'). 

Node: Subsection 11-4-10,	Next: Subsection 11-4-11,	Prev: Subsection 11-4-9,	Up: Section 11-4
  

11.4.10   OCAMLMKTOP
====================
 The OCaml
toploop compiler (default `ocamlmktop'). 

Node: Subsection 11-4-11,	Next: Subsection 11-4-12,	Prev: Subsection 11-4-10,	Up: Section 11-4
  

11.4.11   OCAMLLINK
===================
 The OCaml
bytecode linker (default `$(OCAMLC)'). 

Node: Subsection 11-4-12,	Next: Subsection 11-4-13,	Prev: Subsection 11-4-11,	Up: Section 11-4
  

11.4.12   OCAMLOPTLINK
======================
 The OCaml
native-code linker (default `$(OCAMLOPT)'). 

Node: Subsection 11-4-13,	Next: Subsection 11-4-14,	Prev: Subsection 11-4-12,	Up: Section 11-4
  

11.4.13   OCAMLINCLUDES
=======================
 Search path
to pass to the OCaml compilers (default `.').  The search path with the
`-I' prefix is defined by the `PREFIXED_OCAMLINCLUDES'  variable. 

Node: Subsection 11-4-14,	Next: Subsection 11-4-15,	Prev: Subsection 11-4-13,	Up: Section 11-4
  

11.4.14   OCAMLFIND
===================
 The `ocamlfind'
utility (default `ocamlfind' if  `USE_OCAMLFIND' is set, otherwise
empty). 

Node: Subsection 11-4-15,	Next: Subsection 11-4-16,	Prev: Subsection 11-4-14,	Up: Section 11-4
  

11.4.15   OCAMLFINDFLAGS
========================
 The flags to
pass to `ocamlfind' (default empty, `USE_OCAMLFIND' must be set). 

Node: Subsection 11-4-16,	Next: Subsection 11-4-17,	Prev: Subsection 11-4-15,	Up: Section 11-4
  

11.4.16   OCAMLPACKS
====================
 Package names to
pass to `ocamlfind' (`USE_OCAMLFIND' must be set). 

Node: Subsection 11-4-17,	Next: Subsection 11-4-18,	Prev: Subsection 11-4-16,	Up: Section 11-4
  

11.4.17   BYTE_ENABLED
======================
 Flag
indicating whether to use the bytecode compiler (default `true', when no
`ocamlopt' found, `false' otherwise). 

Node: Subsection 11-4-18,	Next: Subsection 11-4-19,	Prev: Subsection 11-4-17,	Up: Section 11-4
  

11.4.18   NATIVE_ENABLED
========================
 Flag
indicating whether to use the native-code compiler (default `true', when
ocamlopt is found, `false' otherwise).  Both `BYTE_ENABLED' and
`NATIVE_ENABLED' can be set to true;  at least one should be set to
true. 

Node: Subsection 11-4-19,	Next: Subsection 11-4-20,	Prev: Subsection 11-4-18,	Up: Section 11-4
  

11.4.19   OCaml command flags
=============================
  
  The following variables specify additional options to be passed to the
OCaml tools. 

Node: Subsection 11-4-20,	Next: Subsection 11-4-21,	Prev: Subsection 11-4-19,	Up: Section 11-4
  

11.4.20   OCAMLDEPFLAGS
=======================
 Flags to pass
to `OCAMLDEP'. 

Node: Subsection 11-4-21,	Next: Subsection 11-4-22,	Prev: Subsection 11-4-20,	Up: Section 11-4
  

11.4.21   OCAMLPPFLAGS
======================
 Flags to pass
to `CAMLP4'. 

Node: Subsection 11-4-22,	Next: Subsection 11-4-23,	Prev: Subsection 11-4-21,	Up: Section 11-4
  

11.4.22   OCAMLCFLAGS
=====================
 Flags to pass
to the byte-code compiler (default `-g'). 

Node: Subsection 11-4-23,	Next: Subsection 11-4-24,	Prev: Subsection 11-4-22,	Up: Section 11-4
  

11.4.23   OCAMLOPTFLAGS
=======================
 Flags to pass
to the native-code compiler (default empty). 

Node: Subsection 11-4-24,	Next: Subsection 11-4-25,	Prev: Subsection 11-4-23,	Up: Section 11-4
  

11.4.24   OCAMLFLAGS
====================
 Flags to pass to
either compiler (default `-warn-error A'). 

Node: Subsection 11-4-25,	Next: Subsection 11-4-26,	Prev: Subsection 11-4-24,	Up: Section 11-4
  

11.4.25   OCAML_BYTE_LINK_FLAGS
===============================
 Flags
to pass to the byte-code linker (default empty). 

Node: Subsection 11-4-26,	Next: Subsection 11-4-27,	Prev: Subsection 11-4-25,	Up: Section 11-4
  

11.4.26   OCAML_NATIVE_LINK_FLAGS
=================================

Flags to pass to the native-code linker (default empty). 

Node: Subsection 11-4-27,	Next: Subsection 11-4-28,	Prev: Subsection 11-4-26,	Up: Section 11-4
  

11.4.27   OCAML_LINK_FLAGS
==========================
 Flags to
pass to either linker. 

Node: Subsection 11-4-28,	Next: Subsection 11-4-29,	Prev: Subsection 11-4-27,	Up: Section 11-4
  

11.4.28   Library variables
===========================
  
  The following variables are used during linking.

Node: Subsection 11-4-29,	Next: Subsection 11-4-30,	Prev: Subsection 11-4-28,	Up: Section 11-4
  

11.4.29   OCAML_LIBS
====================
 Libraries to
pass to the linker. These libraries become dependencies  of the link
step. 

Node: Subsection 11-4-30,	Next: Subsection 11-4-31,	Prev: Subsection 11-4-29,	Up: Section 11-4
  

11.4.30   OCAML_OTHER_LIBS
==========================
 Additional
libraries to pass to the linker. These libraries are  not included as
dependencies to the link step. Typical use is for the OCaml  standard
libraries like `unix' or `str'. 

Node: Subsection 11-4-31,	Next: Subsection 11-4-32,	Prev: Subsection 11-4-30,	Up: Section 11-4
  

11.4.31   OCAML_CLIBS
=====================
 C libraries to
pass to the linker. 

Node: Subsection 11-4-32,	Next: Subsection 11-4-33,	Prev: Subsection 11-4-31,	Up: Section 11-4
  

11.4.32   OCAML_LIB_FLAGS
=========================
 Extra flags
for the library. 

Node: Subsection 11-4-33,	Next: Subsection 11-4-34,	Prev: Subsection 11-4-32,	Up: Section 11-4
  

11.4.33   OCamlGeneratedFiles
=============================
 

Node: Subsection 11-4-34,	Next: Subsection 11-4-35,	Prev: Subsection 11-4-33,	Up: Section 11-4
  

11.4.34   LocalOCamlGeneratedFiles
==================================
 
<<
  OCamlGeneratedFiles(files)
  LocalOCamlGeneratedFiles(files)
>>
  
  The `OCamlGeneratedFiles' and `LocalOCamlGeneratedFiles' functions
specify files that need to be generated before any OCaml files are
scanned for dependencies. For example, if `parser.ml' and `lexer.ml' are
both generated files, specify: 
<<
  OCamlGeneratedFiles(parser.ml lexer.ml)
>>
  
  The `OCamlGeneratedFiles' function is global --- its arguments will be
generated before any OCaml files anywhere in the project are scanned for
dependencies. The `LocalOCamlGeneratedFiles' function follows the normal
scoping rules of OMake.

Node: Subsection 11-4-35,	Next: Subsection 11-4-36,	Prev: Subsection 11-4-34,	Up: Section 11-4
  

11.4.35   OCamlLibrary
======================

  The `OCamlLibrary' function builds an OCaml library.
  `OCamlLibrary(<libname>, <files>)'
  The `<libname>' and `<files>' are listed without suffixes.

Node: Subsection 11-4-36,	Next: Subsection 11-4-37,	Prev: Subsection 11-4-35,	Up: Section 11-4
  

11.4.36   ABORT_ON_DEPENDENCY_ERRORS
====================================
 
The linker requires that the files to be  listed in dependency order. If
this variable is true, the order of  the files is determined by the
command line, but omake will  abort with an error message if the order
is illegal. Otherwise,  the files are sorted automatically.
  This function returns the list of all the targets that it defines the
rules for (including the `$(name)$(EXT_LIB)' file when `NATIVE_ENABLED'
is set).
  The following code builds the `libfoo.cmxa' library from the files
`foo.cmx' and `bar.cmx' (if `NATIVE_ENABLED' is set), and `libfoo.cma'
from `foo.cmo' and `bar.cmo' (if `BYTE_ENABLED' is set).
<<
  OCamlLibrary(libfoo, foo bar)
>>

Node: Subsection 11-4-37,	Next: Subsection 11-4-38,	Prev: Subsection 11-4-36,	Up: Section 11-4
  

11.4.37   OCamlPackage
======================

  The `OCamlPackage' function builds an OCaml package.
  `OCamlPackage(<name>, <files>)'
  The `<name>' and `<files>' are listed without suffixes. The `<files>'
must have been compiled with the `-for-pack <ident>' flag to the OCaml
compiler.
  This function returns the list of all the targets that it defines the
rules for (including the `$(name)$(EXT_LIB)' file when `NATIVE_ENABLED'
is set).
  The following code builds the `libfoo.cmx' package from the files
`package.cmx' and `bar.cmx' (if `NATIVE_ENABLED' is set), and
`package.cmo' from `foo.cmo' and `bar.cmo' (if `BYTE_ENABLED' is set).
<<
  OCamlPackage(package, foo bar)
>>

Node: Subsection 11-4-38,	Next: Subsection 11-4-39,	Prev: Subsection 11-4-37,	Up: Section 11-4
  

11.4.38   OCamlLibraryCopy
==========================

  The `OCamlLibraryCopy' function copies a library to an install
location.
  `OCamlLibraryCopy(<tag>, <libdir>, <libname>, <interface-files>)'
  The `<interface-files>' specify additional interface files to be
copied if the `INSTALL_INTERFACES' variable is true. 

Node: Subsection 11-4-39,	Next: Subsection 11-4-40,	Prev: Subsection 11-4-38,	Up: Section 11-4
  

11.4.39   OCamlLibraryInstall
=============================

  The `OCamlLibraryInstall' function builds a library and copies it to
an install location in one step.
  `OCamlLibraryInstall(<tag>, <libdir>, <libname>, <files>)' 

Node: Subsection 11-4-40,	Next: Subsection 11-4-41,	Prev: Subsection 11-4-39,	Up: Section 11-4
  

11.4.40   OCamlProgram
======================

  The `OCamlProgram' function builds an OCaml program. It returns the
array with all the targets for which it have defined the rules
(`$(name)$(EXE)' and `$(name).run' and/or `$(name).opt', depending on
the `NATIVE_ENABLED' and `BYTE_ENABLED' variables).
  `OCamlProgram(<name>, <files>)'
  Additional variables used: 
  
 OCAML_LIBS 11.4.29*Note Subsection 11-4-29::  Additional libraries
   passed to the linker, without suffix. These files  become
   dependencies of the target program. 
 OCAML_OTHER_LIBS 11.4.30*Note Subsection 11-4-30::  Additional
   libraries passed to the linker, without suffix. These  files do not
   become dependencies of the target program. 
 OCAML_CLIBS 11.4.31*Note Subsection 11-4-31::  C libraries to pass to
   the linker. 
 OCAML_BYTE_LINK_FLAGS 11.4.25*Note Subsection 11-4-25:: 
   Flags to pass to the bytecode linker. 
 OCAML_NATIVE_LINK_FLAGS 11.4.26*Note Subsection 11-4-26::
    Flags to pass to the native code linker. 
 OCAML_LINK_FLAGS 11.4.27*Note Subsection 11-4-27::  Flags to
   pass to both linkers. 
   

Node: Subsection 11-4-41,	Next: Subsection 11-4-42,	Prev: Subsection 11-4-40,	Up: Section 11-4
  

11.4.41   OCamlProgramCopy
==========================

  The `OCamlProgramCopy' function copies an OCaml program to an install
location.
  `OCamlProgramCopy(<tag>, <bindir>, <name>)'
  Additional variables used: 
  
 NATIVE_ENABLED  If `NATIVE_ENABLED'
   11.4.18*Note Subsection 11-4-18:: is set, the native-code
   executable  is copied; otherwise the byte-code executable is copied. 
   

Node: Subsection 11-4-42,	Next: Section 11-5,	Prev: Subsection 11-4-41,	Up: Section 11-4
  

11.4.42   OCamlProgramInstall
=============================

  The `OCamlProgramInstall' function builds a programs and copies it to
an install location in one step.
  `OCamlProgramInstall(<tag>, <bindir>, <name>, <files>)' 

Node: Section 11-5,	Next: Subsection 11-5-1,	Prev: Section 11-4,	Up: Chapter 11
  

11.5   Building LaTeX programs
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=

  
* Menu:

* Subsection 11-5-1::	Configuration variables
* Subsection 11-5-2::	LATEX
* Subsection 11-5-3::	TETEX2_ENABLED
* Subsection 11-5-4::	LATEXFLAGS
* Subsection 11-5-5::	BIBTEX
* Subsection 11-5-6::	MAKEINDEX
* Subsection 11-5-7::	DVIPS
* Subsection 11-5-8::	DVIPSFLAGS
* Subsection 11-5-9::	DVIPDFM
* Subsection 11-5-10::	DVIPDFMFLAGS
* Subsection 11-5-11::	PDFLATEX
* Subsection 11-5-12::	PDFLATEXFLAGS
* Subsection 11-5-13::	USEPDFLATEX
* Subsection 11-5-14::	LaTeXDocument
* Subsection 11-5-15::	TEXINPUTS
* Subsection 11-5-16::	TEXDEPS
* Subsection 11-5-17::	TeXGeneratedFiles
* Subsection 11-5-18::	LocalTeXGeneratedFiles
* Subsection 11-5-19::	LaTeXDocumentCopy
* Subsection 11-5-20::	LaTeXDocumentInstall


Node: Subsection 11-5-1,	Next: Subsection 11-5-2,	Prev: Section 11-5,	Up: Section 11-5
  

11.5.1   Configuration variables
================================
  
  The following variables can be modified in your project. 

Node: Subsection 11-5-2,	Next: Subsection 11-5-3,	Prev: Subsection 11-5-1,	Up: Section 11-5
  

11.5.2   LATEX
==============
 The LaTeX command
(default `latex'). 

Node: Subsection 11-5-3,	Next: Subsection 11-5-4,	Prev: Subsection 11-5-2,	Up: Section 11-5
  

11.5.3   TETEX2_ENABLED
=======================
 Flag
indicating whether to use advanced LaTeX options present in TeTeX v.2
(default value is determined the first time omake reads `LaTeX.src' and
depends on the version of LaTeX you have installed). 

Node: Subsection 11-5-4,	Next: Subsection 11-5-5,	Prev: Subsection 11-5-3,	Up: Section 11-5
  

11.5.4   LATEXFLAGS
===================
 The LaTeX flags
(defaults depend on the `TETEX2_ENABLED' variable) 

Node: Subsection 11-5-5,	Next: Subsection 11-5-6,	Prev: Subsection 11-5-4,	Up: Section 11-5
  

11.5.5   BIBTEX
===============
 The BibTeX command
(default `bibtex'). 

Node: Subsection 11-5-6,	Next: Subsection 11-5-7,	Prev: Subsection 11-5-5,	Up: Section 11-5
  

11.5.6   MAKEINDEX
==================
 The command to
build an index (default `makeindex'). 

Node: Subsection 11-5-7,	Next: Subsection 11-5-8,	Prev: Subsection 11-5-6,	Up: Section 11-5
  

11.5.7   DVIPS
==============
 The `.dvi' to
PostScript converter (default `dvips'). 

Node: Subsection 11-5-8,	Next: Subsection 11-5-9,	Prev: Subsection 11-5-7,	Up: Section 11-5
  

11.5.8   DVIPSFLAGS
===================
 Flags to pass to
`dvips' (default `-t letter'). 

Node: Subsection 11-5-9,	Next: Subsection 11-5-10,	Prev: Subsection 11-5-8,	Up: Section 11-5
  

11.5.9   DVIPDFM
================
 The `.dvi' to
`.pdf' converter (default `dvipdfm'). 

Node: Subsection 11-5-10,	Next: Subsection 11-5-11,	Prev: Subsection 11-5-9,	Up: Section 11-5
  

11.5.10   DVIPDFMFLAGS
======================
 Flags to pass
to `dvipdfm' (default `-p letter'). 

Node: Subsection 11-5-11,	Next: Subsection 11-5-12,	Prev: Subsection 11-5-10,	Up: Section 11-5
  

11.5.11   PDFLATEX
==================
 The `.latex' to
`.pdf' converter (default `pdflatex'). 

Node: Subsection 11-5-12,	Next: Subsection 11-5-13,	Prev: Subsection 11-5-11,	Up: Section 11-5
  

11.5.12   PDFLATEXFLAGS
=======================
 Flags to pass
to pdflatex (default is empty). 

Node: Subsection 11-5-13,	Next: Subsection 11-5-14,	Prev: Subsection 11-5-12,	Up: Section 11-5
  

11.5.13   USEPDFLATEX
=====================
 Flag indicating
whether to use pdflatex instead of dvipdfm to generate the `.pdf'
document (default `false'). 

Node: Subsection 11-5-14,	Next: Subsection 11-5-15,	Prev: Subsection 11-5-13,	Up: Section 11-5
  

11.5.14   LaTeXDocument
=======================

  The `LaTeXDocument' produces a LaTeX document.
  `LaTeXDocument(<name>, <texfiles>)'
  The document `<name>' and `<texfiles>' are listed without suffixes.
This function returns the filenames for the generated `.ps' and `.pdf'
files.
  Additional variables used: 

Node: Subsection 11-5-15,	Next: Subsection 11-5-16,	Prev: Subsection 11-5-14,	Up: Section 11-5
  

11.5.15   TEXINPUTS
===================
 The LaTeX search
path (an array of directories, default is  taken from the `TEXINPUTS'
environment variable). 

Node: Subsection 11-5-16,	Next: Subsection 11-5-17,	Prev: Subsection 11-5-15,	Up: Section 11-5
  

11.5.16   TEXDEPS
=================
 Additional files
this document depends on. 

Node: Subsection 11-5-17,	Next: Subsection 11-5-18,	Prev: Subsection 11-5-16,	Up: Section 11-5
  

11.5.17   TeXGeneratedFiles
===========================
 

Node: Subsection 11-5-18,	Next: Subsection 11-5-19,	Prev: Subsection 11-5-17,	Up: Section 11-5
  

11.5.18   LocalTeXGeneratedFiles
================================
 
<<
  TeXGeneratedFiles(files)
  LocalTeXGeneratedFiles(files)
>>
  
  The `TeXGeneratedFiles' and `LocalTeXGeneratedFiles' functions specify
files that need to be generated before any LaTeXfiles are scanned for
dependencies. For example, if `config.tex' and `inputs.tex' are both
generated files, specify: 
<<
      TeXGeneratedFiles(config.tex inputs.tex)
>>
  
  The `TeXGeneratedFiles' function is global --- its arguments will be
generated before any TeX files anywhere in the project are scanned for
dependencies. The `LocalTeXGeneratedFiles' function follows the normal
scoping rules of OMake.

Node: Subsection 11-5-19,	Next: Subsection 11-5-20,	Prev: Subsection 11-5-18,	Up: Section 11-5
  

11.5.19   LaTeXDocumentCopy
===========================

  The `LaTeXDocumentCopy' copies the document to an install location.
  `LaTeXDocumentCopy(<tag>, <libdir>, <installname>, <docname>)'
  This function copies just the `.pdf' and `.ps' files. 

Node: Subsection 11-5-20,	Next: Section 11-6,	Prev: Subsection 11-5-19,	Up: Section 11-5
  

11.5.20   LaTeXDocumentInstall
==============================

  The `LaTeXDocumentInstall' builds a document and copies it to an
install location in one step.
  `LaTeXDocumentInstall(<tag>, <libdir>, <installname>, <docname>,
<files>)' 

Node: Section 11-6,	Next: Subsection 11-6-1,	Prev: Section 11-5,	Up: Chapter 11
  

11.6   Examining the dependency graph
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

   
* Menu:

* Subsection 11-6-1::	dependencies
* Subsection 11-6-2::	dependencies-all
* Subsection 11-6-3::	target
* Subsection 11-6-4::	rule


Node: Subsection 11-6-1,	Next: Subsection 11-6-2,	Prev: Section 11-6,	Up: Section 11-6
  

11.6.1   dependencies
=====================
 

Node: Subsection 11-6-2,	Next: Subsection 11-6-3,	Prev: Subsection 11-6-1,	Up: Section 11-6
  

11.6.2   dependencies-all
=========================

<<
     $(dependencies targets) : File Array
     $(dependencies-all targets) : File Array
     $(dependencies-proper targets) : File Array
        targets : File Array
     raises RuntimeException
>>
  
  The `dependencies' function returns the set of immediate dependencies
of the given targets. This function can only be used within a rule body
and all the arguments to the `dependency' function must also be
dependencies of this rule. This restriction ensures that all the
dependencies are known when this function is executed.
  The `dependencies-all' function is similar, but it expands the
dependencies recursively, returning all of the dependencies of a target,
not just the immediate ones.
  The `dependencies-proper' function returns all recursive dependencies,
except the dependencies that are leaf targets. A leaf target is a target
that has no dependencies and no build commands; a leaf target
corresponds to a source file in the current project.
  In all three functions, files that are not part of the current project
are silently discarded.
  One purpose of the `dependencies-proper' function is for ``clean''
targets. For example, one way to delete all intermediate files in a
build is with a rule that uses the `dependencies-proper'. Note however,
that the rule requires building the project before it can be deleted.
For a shorter form, see the `filter-proper-targets' function.
<<
      .PHONY: clean
  
      APP = ...     # the name of the target application
      clean: $(APP)
         rm $(dependencies-proper $(APP))
>>
  

Node: Subsection 11-6-3,	Next: Subsection 11-6-4,	Prev: Subsection 11-6-2,	Up: Section 11-6
  

11.6.3   target
===============
 
<<
     $(target targets) : Rule Array
        targets : File Sequence
     raises RuntimeException
>>
  
  The `target' function returns the Target object associated with each
of the targets. See the `Target' object for more information. 

Node: Subsection 11-6-4,	Next: Chapter 12,	Prev: Subsection 11-6-3,	Up: Section 11-6
  

11.6.4   rule
=============

  The `rule' function is called whenever a build rule is defined. It is
unlikely that you will need to redefine this function, except in very
exceptional cases.
<<
     rule(multiple, target, pattern, sources, options, body) : Rule
        multiple : String
        target   : Sequence
        pattern  : Sequence
        sources  : Sequence
        options  : Array
        body     : Body
>>
  
  The `rule' function is called when a rule is evaluated.
  
  
 multiple  A Boolean value indicating whether the rule was defined  with
   a double colon `::'. 
 target  The sequence of target names. 
 pattern  The sequence of patterns. This sequence will be empty  for
   two-part rules. 
 sources  The sequence of dependencies. 
 options  An array of options. Each option is represented  as a
   two-element array with an option name, and the option value. 
 body  The body expression of the rule. 
  
  Consider the following rule.
<<
     target: pattern: sources :name1: option1 :name2: option2
        expr1
        expr2
>>
  
  This expression represents the following function call, where square
brackets are used to indicate arrays.
<<
     rule(false, target, pattern, sources,
          [[:name1:, option1], [:name2:, option2]]
          [expr1; expr2])
>>
   

Node: Chapter 12,	Next: Section 12-1,	Prev: Section 11-6,	Up: Top
  

Chapter 12     The OSH shell
****************************
    
  OMake also includes a standalone command-line interpreter osh that can
be used as an interactive shell. The shell uses the same syntax, and
provides the same features on all platforms omake supports, including
Win32.
* Menu:

* Section 12-1::	Startup
* Section 12-2::	Aliases
* Section 12-3::	Interactive syntax


Node: Section 12-1,	Next: Subsection 12-1-1,	Prev: Chapter 12,	Up: Chapter 12
  

12.1   Startup
*=*=*=*=*=*=*=

  
  On startup, osh reads the file `~/.oshrc' if it exists. The syntax of
this file is the same as an OMakefile. The following additional
variables are significant.
* Menu:

* Subsection 12-1-1::	prompt
* Subsection 12-1-2::	ignoreeof


Node: Subsection 12-1-1,	Next: Subsection 12-1-2,	Prev: Section 12-1,	Up: Section 12-1
  

12.1.1   prompt
===============
 The `prompt'
variable specifies the command-line prompt. It can be a simple string.
<<
      prompt = osh>
>>
  
  Or you may choose to define it as a function of no arguments.
<<
      prompt() =
          return $"<$(USER):$(HOST) $(homename $(CWD))>"
>>
  
  An example of the latter prompt is as follows.
<<
      <jyh:kenai.yapper.org ~>cd links/omake
      <jyh:kenai.yapper.org ~/links/omake>
>>
  

Node: Subsection 12-1-2,	Next: Section 12-2,	Prev: Subsection 12-1-1,	Up: Section 12-1
  

12.1.2   ignoreeof
==================
  If the
`ignoreeof' is `true', then `osh' will not exit on  a terminal
end-of-file (usually `^D' on Unix systems).

Node: Section 12-2,	Next: Section 12-3,	Prev: Section 12-1,	Up: Chapter 12
  

12.2   Aliases
*=*=*=*=*=*=*=

   
  Command aliases are defined by adding functions to the `Shell.'
object. The following alias adds the `-AF' option to the `ls' command.
<<
      Shell. +=
         ls(argv) =
            "ls" -AF $(argv)
>>
  
  Quoted commands do not undergo alias expansion. The quotation `"ls"'
prevents the alias from being recursive.

Node: Section 12-3,	Next: Appendix A,	Prev: Section 12-2,	Up: Chapter 12
  

12.3   Interactive syntax
*=*=*=*=*=*=*=*=*=*=*=*=*

  
  The interactive syntax in `osh' is the same as the syntax of an
`OMakefile', with one exception in regard to indentation. The line
before an indented block must have a colon at the end of the line. A
block is terminated with a `.' on a line by itself, or `^D'. In the
following example, the first line `if true' has no body, because there
is no colon.
<<
     # The following if has no body
     osh>if true
     # The following if has a body
     osh>if true:
     if>       if true:
     if>          println(Hello world)
     if>          .
     Hello world
>>
  
  Note that `osh' makes some effort to modify the prompt while in an
indented body, and it auto-indents the text.
  The colon signifier is also allowed in files, although it is not
required.
   

Node: Appendix A,	Next: Section A-1,	Prev: Chapter 12,	Up: Top
  

Appendix A     Synopsis
***********************
    
  omake  [-k]  [-j <count>]  [-n]  [-s] [-S]  [-p]  [-P]  [-w]  [-t] 
[-u]  [-U]  [-R]  [--project]  [--progress] [--no-progress] 
[--print-status] [--no-print-status]  [--print-exit] [--no-print-exit] 
[--print-dependencies]  [--show-dependencies <target>] 
[--all-dependencies]  [--verbose-dependencies]  [--force-dotomake] 
[--dotomake <dir>]  [--flush-includes]  [--configure]  [--install] 
[--install-all]  [--install-force]  [--version]  [--absname] 
filename...  [var-definition...]
* Menu:

* Section A-1::	Command-line options


Node: Section A-1,	Next: Appendix B,	Prev: Appendix A,	Up: Appendix A
  

A.1   Command-line options
*=*=*=*=*=*=*=*=*=*=*=*=*=

  
  
  
 -k  Do not abort when a build command fails; continue to build as much
   of the project as possible.
 
 -n  Print the commands that would be executed, but do no execute them.
   This can be used to see what would happen if the project were to be
   built.
 
 -s  Do not print commands as they are executed (be ``silent'').
 
 -S  Do not print commands as they are executed unless they produce
   output and/or fail.
 
 --progress  Print a progress indicator. This is normally used with the
   -s or -S options.
 
 --no-progress  Do not print a progress indicator (default).
 
 --print-exit  Print termination codes when commands complete.
 
 --no-print-exit  Do not print termination codes when commands complete
   (default).
 
 -w  Print directory information in make format as commands are
   executed. This is mainly useful for editors that expect make-style
   directory information for determining the location of errors.
 
 -p  Watch the filesystem for changes, and continue the build until it
   succeeds. If this option is specified, omake will restart the build
   whenever source files are modified. Implies -k.
 
 -P  Watch the filesystem for changes forever. If this option is
   specified, omake will restart the build whenever source files are
   modified. Implies -k.
 
 -R  Ignore the current directory and build the project from its root
   directory. When omake is run in a subdirectory of a project, it
   normally builds files within the current directory and its
   subdirectories. If the -R option is specified, the build is performed
   as if omake were run in the project root.
 
 -t  Update the omake database to force the project to be considered
   up-to-date.
 
 -U  Do not trust cached build information. This will force the entire
   project to be rebuilt.
 
 --depend  Do not trust cached dependency information. This will force
   files to be rescanned for dependency information.
 
 --configure  Re-run `static.\' sections of the included omake files,
   instead of trusting the cached results.
 
 --force-dotomake  Always use the `$HOME/.omake' for the `.omc' cache
   files.
 
 --dotomake <dir>  Use the specified directory instead of the
   `$HOME/.omake' for the placement of the `.omc' cache files.
 
 -j <count>  Run multiple build commands in parallel. The count
   specifies a bound on the number of commands to run simultaneously. In
   addition, the count may specify servers for remote execution of
   commands in the form `server=count'. For example, the option `-j
   2:small.host.org=1:large.host.org=4' would specify that up to 2 jobs
   can be executed locally, 1 on the server `small.host.org' and 4 on
   `large.host.org'. Each remote server must use the same filesystem
   location for the project.
 Remote execution is currently an experimental feature. Remote
   filesystems like NFS do not provide adequate file consistency for
   this to work.
 
 --print-dependencies  Print dependency information for the targets on
   the command line.
 
 --show-dependencies <target>  Print dependency information if the
   `target' is built.
 
 --all-dependencies  If either of the options --print-dependencies or
   --show-dependencies is in effect, print transitive dependencies. That
   is, print all dependencies recursively. If neither option
   --print-dependencies, --show-dependencies is specified, this option
   has no effect.
 
 --verbose-dependencies  If either of the options --print-dependencies
   or --show-dependencies is in effect, also print listings of
   dependencies. The output is very verbose, consider redirecting to a
   file. If neither option --print-dependencies, --show-dependencies is
   specified, this option has no effect.
 
 --install  Install default files OMakefile and OMakeroot into the
   current  directory. You would typically do this to start a project in
   the current directory.
 
 --install-all  In addition to installing files OMakefile and OMakeroot,
    install default OMakefiles into each subdirectory of the current
   directory.  cvs(1) rules are used for filtering the subdirectory
   list. For example, OMakefiles  are not copied into directories called
   `CVS', `RCCS', etc.
 
 --install-force  Normally, omake will prompt before it overwrites any 
   existing OMakefile. If this option is given, all files are forcibly
   overwritten  without prompting.
 
 --absname  Filenames should expand to absolute pathnames. [jyh: this
   option needs to be documented in Chapter 6*Note Chapter 6::.
   It may become deprecated.]
 
 var-definition  omake variables can also be defined on the command 
   line in the form `name=value'. For example, the `CFLAGS' variable
   might be defined  on the command line with the argument
   `CFLAGS="-Wall -g"'. 
  
  In addition, omake supports a number of debugging flags on the command
line. Run `omake --help' to get a summary of these flags.
   

Node: Appendix B,	Next: Section B-1,	Prev: Appendix A,	Up: Top
  

Appendix B     OMake grammar
****************************
    
* Menu:

* Section B-1::	OMake lexical conventions
* Section B-2::	The OMake grammar
* Section B-3::	Dollar modifiers


Node: Section B-1,	Next: Subsection B-1-1,	Prev: Appendix B,	Up: Appendix B
  

B.1   OMake lexical conventions
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

  
  The OMake language is based on the language for GNU/BSD make, where
there are few lexical conventions. Strictly speaking, there are no
keywords, and few special symbols.
* Menu:

* Subsection B-1-1::	Comments
* Subsection B-1-2::	Special characters
* Subsection B-1-3::	Identifiers
* Subsection B-1-4::	Command identifiers
* Subsection B-1-5::	Variable references
* Subsection B-1-6::	String constants


Node: Subsection B-1-1,	Next: Subsection B-1-2,	Prev: Section B-1,	Up: Section B-1
  

B.1.1   Comments
================
  
  Comments begin with the `#' character and continue to the end-of-line.
Text within a comment is unrestricted.
  Examples.
<<
     # This is a comment
     # This $comment contains a quote " character
>>
  

Node: Subsection B-1-2,	Next: Subsection B-1-3,	Prev: Subsection B-1-1,	Up: Section B-1
  

B.1.2   Special characters
==========================
  
  The following characters are special in some contexts.
<<
     $    (    )    ,    .   =    :    "    '    `    \    #
>>
  
  
  
 - `$' is used to denote a variable reference, or function application. 
 - Parentheses `)', `(' are argument deliminters. 
 - The command `,' is an argument separator. 
 - The period symbol `.' is a name separator. 
 - The equality symbol `=' denotes a definition. 
 - The colon symbol `:' is used to denote rules, and (optionally) to
   indicate  that an expression is followed by an indented body. 
 - The quotation symbols `"' and `'' delimit character strings. 
 - The symbol `#' is the first character of a constant. 
 - The escape symbol `\' is special only when followed by another
   special  character. In this case, the special status of the second
   character is removed,  and the sequence denotes the second character.
   Otherwise, the `\' is not special.
 Examples:
 
      
    - `\$': the `$' character (as a normal character).  
    - `\#': the `#' character (as a normal character).  
    - `\\': the `\' character (as a normal character).  
    - `c\:\Windows\moo\#boo': the string `c:\Windows\moo#boo'.  
  
  

Node: Subsection B-1-3,	Next: Subsection B-1-4,	Prev: Subsection B-1-2,	Up: Section B-1
  

B.1.3   Identifiers
===================
  
  Identifiers (variable names) are drawn from the ASCII alphanumeric
characters as well as `_', `-', `~', `@'. Case is significant; the
following identifiers are distinct: `FOO', `Foo', `foo'. The identifier
may begin with any of the valid characters, including digits.
  Using `egrep' notation, the regular expression for identifiers is
defined as follows.
<<
      identifier ::= [-@~_A-Za-z0-9]+
>>
  
  The following are legal identifiers.
<<
      Xyz    hello_world    seventy@nine
      79-32  Gnus~Gnats     CFLAGS
>>
  
  The following are not legal identifiers.
<<
      x+y    hello&world
>>
  
