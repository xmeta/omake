This file has been translated from LaTeX by HeVeA.

Node: Appendix A,	Next: Section A-1,	Prev: Chapter 14,	Up: Top
  

Appendix A     Synopsis
***********************
    
  omake [-j <count>] [-k] [-p] [-P] [-n] [-s] [-S] [-w] [-t] [-u] [-U]
[-R] [--verbose] [--project] [--depend] [--progress] [--print-status]
[--print-exit] [--print-dependencies] [--show-dependencies <target>]
[--all-dependencies] [--verbose-dependencies] [--force-dotomake]
[--dotomake <dir>] [--flush-includes] [--configure] [--save-interval
<seconds>] [--install] [--install-all] [--install-force] [--version]
[--absname] [--output-normal] [--output-postpone] [--output-only-errors]
[--output-at-end] filename... [var-definition...]
* Menu:

* Section A-1::	General usage
* Section A-2::	Output control
* Section A-3::	Build options
* Section A-4::	Additional options
* Section A-5::	Environment variables
* Section A-6::	Functions
* Section A-7::	Option processing
* Section A-8::	.omakerc


Node: Section A-1,	Next: Section A-2,	Prev: Appendix A,	Up: Appendix A
  

A.1   General usage
*=*=*=*=*=*=*=*=*=*

  
  For Boolean options (for example, `-s', `--progress', etc.) the option
can include a prefix `--no', which inverts the usual sense of the
option. For example, the option `--progress' means "print a progress
bar," while the option `--no--progress' means "do not print a progress
bar."
  If multiple instances of an option are specified, the final option
determines the behavior of OMake. In the following command line, the
final `--no-S' cancels the earlier `-S'.
<<    % omake -S --progress --no-S
>>
  

Node: Section A-2,	Next: Subsection A-2-1,	Prev: Section A-1,	Up: Appendix A
  

A.2   Output control
*=*=*=*=*=*=*=*=*=*=

  
* Menu:

* Subsection A-2-1::	-s
* Subsection A-2-2::	-S
* Subsection A-2-3::	-w
* Subsection A-2-4::	--progress
* Subsection A-2-5::	--print-status
* Subsection A-2-6::	--print-exit
* Subsection A-2-7::	--verbose
* Subsection A-2-8::	--output-normal
* Subsection A-2-9::	--output-postpone
* Subsection A-2-10::	--output-only-errors
* Subsection A-2-11::	--output-at-end
* Subsection A-2-12::	-o


Node: Subsection A-2-1,	Next: Subsection A-2-2,	Prev: Section A-2,	Up: Section A-2
  

A.2.1   -s
==========
 `-s'
  Never not print commands as they are executed (be "silent").

Node: Subsection A-2-2,	Next: Subsection A-2-3,	Prev: Subsection A-2-1,	Up: Section A-2
  

A.2.2   -S
==========
 `-S'
  Do not print commands as they are executed unless they produce output
and/or fail. This is the default.

Node: Subsection A-2-3,	Next: Subsection A-2-4,	Prev: Subsection A-2-2,	Up: Section A-2
  

A.2.3   -w
==========
 `-w'
  Print directory information in make format as commands are executed.
This is mainly useful for editors that expect make-style directory
information for determining the location of errors.

Node: Subsection A-2-4,	Next: Subsection A-2-5,	Prev: Subsection A-2-3,	Up: Section A-2
  

A.2.4   --progress
==================
 `--progress'
  Print a progress indicator. This option is enabled by default when the
OMake's output (`stdout') is on a terminal and disabled by default
(except on Windows) when the OMake's output is redirected.

Node: Subsection A-2-5,	Next: Subsection A-2-6,	Prev: Subsection A-2-4,	Up: Section A-2
  

A.2.5   --print-status
======================

`--print-status'
  Print status lines (the `+' and `-' lines).

Node: Subsection A-2-6,	Next: Subsection A-2-7,	Prev: Subsection A-2-5,	Up: Section A-2
  

A.2.6   --print-exit
====================

`--print-exit'
  Print termination codes when commands complete.

Node: Subsection A-2-7,	Next: Subsection A-2-8,	Prev: Subsection A-2-6,	Up: Section A-2
  

A.2.7   --verbose
=================
 `--verbose'
  Make OMake very verbose. This option is equivalent to `--no-S
--print-status --print-exit VERBOSE=true'

Node: Subsection A-2-8,	Next: Subsection A-2-9,	Prev: Subsection A-2-7,	Up: Section A-2
  

A.2.8   --output-normal
=======================

`--output-normal'
  As rule commands are executed, relay their output to the OMake output
right away. This is enabled by default, unless `--output-postpone' or
`--output-only-errors' is enabled.

Node: Subsection A-2-9,	Next: Subsection A-2-10,	Prev: Subsection A-2-8,	Up: Section A-2
  

A.2.9   --output-postpone
=========================

`--output-postpone'
  When a rule finishes, print the output as a single block. This is
useful in combination `-j' option (see Section
A.3.12*Note Subsection A-3-12::), where the output of multiple subprocesses
can be garbled. The diversion is printed as a single coherent unit.
  Note that enabling `--output-postpone' will by default disable the
`--output-normal' option. This might be problematic if you have a
command that decides to ask for interactive input. If the
`--output-postpone' is enabled, but the `--output-normal' is not, the
prompt of such a command will not be visible and it may be hard to
figure out why the build appears "stuck". You might also consider using
the `--progress' flag (see Section A.2.4*Note Subsection A-2-4::)
so that you can see when the build is active. 

Node: Subsection A-2-10,	Next: Subsection A-2-11,	Prev: Subsection A-2-9,	Up: Section A-2
  

A.2.10   --output-only-errors
=============================

`--output-only-errors' 
  Similar to `--output-postpone', except that the postponed output from
commands that were successful will be discarded. This can be useful in
reducing unwanted output so that you can concentrate on any errors.

Node: Subsection A-2-11,	Next: Subsection A-2-12,	Prev: Subsection A-2-10,	Up: Section A-2
  

A.2.11   --output-at-end
========================

`--output-at-end'
  If any rules/commands fail, re-print the output of the failed commands
when OMake finishes the build. This is especially useful when any of the
`-k', `-p', or `-P' options are enabled.
  This option is off by default. However, when `-k' is enabled ---
either explicitly or via one of the `-p'/`-P' options ---
`--output-at-end' will be enabled by default.

Node: Subsection A-2-12,	Next: Section A-3,	Prev: Subsection A-2-11,	Up: Section A-2
  

A.2.12   -o
===========
 `-o [01jwWpPxXsS]'
  For brevity, the `-o' option is also provided to duplicate the above
output options. The `-o' option takes a argument consisting of a
sequence of characters. The characters are read from left-to-right; each
specifies a set of output options. In general, an uppercase character
turns the option on; a lowercase character turns the option off.
  
  
 0  Equivalent to `-s --output-only-errors'
 This option specifies that `omake' should be as quiet as possible. If
   any errors occur during the build, the output is delayed until the
   build terminates. Output from successful commands is discarded.
 
 1  Equivalent to `-S --progress --output-only-errors'
 This is a slightly more relaxed version of "quiet" output. The output
   from successful commands is discarded. The output from failed
   commands is printed immediately after the command complete. The
   output from failed commands is displayed twice: once immediately
   after the command completes, and again when the build completes. A
   progress bar is displayed so that you know when the build is active.
   Include the ``p'' option if you want to turn off the progress bar
   (for example `omake -o 1p').
 
 2  Equivalent to `--progress --output-postpone'
 The is even more relaxed, output from successful commands is printed.
   This is often useful for deinterleaving the output when using `-j'.
 
 W  Equivalent to `-w' 
 w  Equivalent to `--no-w' 
 P  Equivalent to `--progress' 
 p  Equivalent to `--no--progress' 
 X  Equivalent to `--print-exit' 
 x  Equivalent to `--no-print-exit' 
 S  Equivalent to `-S' 
 s  Equivalent to `--no-S' 
  

Node: Section A-3,	Next: Subsection A-3-1,	Prev: Section A-2,	Up: Appendix A
  

A.3   Build options
*=*=*=*=*=*=*=*=*=*

  
* Menu:

* Subsection A-3-1::	-k
* Subsection A-3-2::	-n
* Subsection A-3-3::	-p
* Subsection A-3-4::	-P
* Subsection A-3-5::	-R
* Subsection A-3-6::	-t
* Subsection A-3-7::	-U
* Subsection A-3-8::	--depend
* Subsection A-3-9::	--configure
* Subsection A-3-10::	--force-dotomake
* Subsection A-3-11::	--dotomake
* Subsection A-3-12::	-j
* Subsection A-3-13::	--print-dependencies
* Subsection A-3-14::	--show-dependencies
* Subsection A-3-15::	--all-dependencies
* Subsection A-3-16::	--verbose-dependencies
* Subsection A-3-17::	--install
* Subsection A-3-18::	--install-all
* Subsection A-3-19::	--install-force
* Subsection A-3-20::	--absname
* Subsection A-3-21::	variable definition


Node: Subsection A-3-1,	Next: Subsection A-3-2,	Prev: Section A-3,	Up: Section A-3
  

A.3.1   -k
==========
 `-k'
  Do not abort when a build command fails; continue to build as much of
the project as possible. This option is implied by both `-p' and `-P'
options. In turn, this option would imply the `--output-at-end' option.

Node: Subsection A-3-2,	Next: Subsection A-3-3,	Prev: Subsection A-3-1,	Up: Section A-3
  

A.3.2   -n
==========
 `-n'
  This can be used to see what would happen if the project were to be
built.

Node: Subsection A-3-3,	Next: Subsection A-3-4,	Prev: Subsection A-3-2,	Up: Section A-3
  

A.3.3   -p
==========
 `-p'
  Watch the filesystem for changes, and continue the build until it
succeeds. If this option is specified, omake will restart the build
whenever source files are modified. Implies -k.

Node: Subsection A-3-4,	Next: Subsection A-3-5,	Prev: Subsection A-3-3,	Up: Section A-3
  

A.3.4   -P
==========
 `-P'
  Watch the filesystem for changes forever. If this option is specified,
omake will restart the build whenever source files are modified. Implies
-k.

Node: Subsection A-3-5,	Next: Subsection A-3-6,	Prev: Subsection A-3-4,	Up: Section A-3
  

A.3.5   -R
==========
 `-R'
  Ignore the current directory and build the project from its root
directory. When omake is run in a subdirectory of a project and no
explicit targets are given on the command line, it would normally only
build files within the current directory and its subdirectories (more
precisely, it builds all the `.DEFAULT' targets in the current directory
and its subdirectories). If the -R option is specified, the build is
performed as if omake were run in the project root.
  In other words, with the `-R' option, all the relative targets
specified on the command line will be taken relative to the project root
(instead of relative to the current directory). When no targets are
given on the command line, all the `.DEFAULT' targets in the project
will be built (regardless of the current directory).

Node: Subsection A-3-6,	Next: Subsection A-3-7,	Prev: Subsection A-3-5,	Up: Section A-3
  

A.3.6   -t
==========
 `-t'
  Update the omake database to force the project to be considered
up-to-date.

Node: Subsection A-3-7,	Next: Subsection A-3-8,	Prev: Subsection A-3-6,	Up: Section A-3
  

A.3.7   -U
==========
 `-U'
  Do not trust cached build information. This will force the entire
project to be rebuilt.

Node: Subsection A-3-8,	Next: Subsection A-3-9,	Prev: Subsection A-3-7,	Up: Section A-3
  

A.3.8   --depend
================
 `--depend'
  Do not trust cached dependency information. This will force files to
be rescanned for dependency information.

Node: Subsection A-3-9,	Next: Subsection A-3-10,	Prev: Subsection A-3-8,	Up: Section A-3
  

A.3.9   --configure
===================

`--configure'
  Re-run `static.' sections of the included omake files, instead of
trusting the cached results.

Node: Subsection A-3-10,	Next: Subsection A-3-11,	Prev: Subsection A-3-9,	Up: Section A-3
  

A.3.10   --force-dotomake
=========================

`--force-dotomake'
  Always use the `$HOME/.omake' for the `.omc' cache files.

Node: Subsection A-3-11,	Next: Subsection A-3-12,	Prev: Subsection A-3-10,	Up: Section A-3
  

A.3.11   --dotomake
===================
 `--dotomake
<dir>'
  Use the specified directory instead of the `$HOME/.omake' for the
placement of the `.omc' cache files.

Node: Subsection A-3-12,	Next: Subsection A-3-13,	Prev: Subsection A-3-11,	Up: Section A-3
  

A.3.12   -j
===========
 `-j <count>'
  Run multiple build commands in parallel. The count specifies a bound
on the number of commands to run simultaneously. In addition, the count
may specify servers for remote execution of commands in the form
`server=count'. For example, the option `-j
2:small.host.org=1:large.host.org=4' would specify that up to 2 jobs can
be executed locally, 1 on the server `small.host.org' and 4 on
`large.host.org'. Each remote server must use the same filesystem
location for the project.
  Remote execution is currently an experimental feature. Remote
filesystems like NFS do not provide adequate file consistency for this
to work.

Node: Subsection A-3-13,	Next: Subsection A-3-14,	Prev: Subsection A-3-12,	Up: Section A-3
  

A.3.13   --print-dependencies
=============================

`--print-dependencies'
  Print dependency information for the targets on the command line.

Node: Subsection A-3-14,	Next: Subsection A-3-15,	Prev: Subsection A-3-13,	Up: Section A-3
  

A.3.14   --show-dependencies
============================

`--show-dependencies <target>'
  Print dependency information if the `target' is built.

Node: Subsection A-3-15,	Next: Subsection A-3-16,	Prev: Subsection A-3-14,	Up: Section A-3
  

A.3.15   --all-dependencies
===========================

`--all-dependencies'
  If either of the options --print-dependencies or --show-dependencies
is in effect, print transitive dependencies. That is, print all
dependencies recursively. If neither option --print-dependencies,
--show-dependencies is specified, this option has no effect.

Node: Subsection A-3-16,	Next: Subsection A-3-17,	Prev: Subsection A-3-15,	Up: Section A-3
  

A.3.16   --verbose-dependencies
===============================

`--verbose-dependencies'
  If either of the options --print-dependencies or --show-dependencies
is in effect, also print listings for each dependency. The output is
very verbose, consider redirecting to a file. If neither option
--print-dependencies, --show-dependencies is specified, this option has
no effect.

Node: Subsection A-3-17,	Next: Subsection A-3-18,	Prev: Subsection A-3-16,	Up: Section A-3
  

A.3.17   --install
==================
 `--install'
  Install default files OMakefile and OMakeroot into the current
directory. You would typically do this to start a project in the current
directory.

Node: Subsection A-3-18,	Next: Subsection A-3-19,	Prev: Subsection A-3-17,	Up: Section A-3
  

A.3.18   --install-all
======================

`--install-all'
  In addition to installing files OMakefile and OMakeroot, install
default OMakefiles into each subdirectory of the current directory.
cvs(1) rules are used for filtering the subdirectory list. For example,
OMakefiles are not copied into directories called `CVS', `RCCS', etc.

Node: Subsection A-3-19,	Next: Subsection A-3-20,	Prev: Subsection A-3-18,	Up: Section A-3
  

A.3.19   --install-force
========================

`--install-force'
  Normally, omake will prompt before it overwrites any existing
OMakefile. If this option is given, all files are forcibly overwritten
without prompting.

Node: Subsection A-3-20,	Next: Subsection A-3-21,	Prev: Subsection A-3-19,	Up: Section A-3
  

A.3.20   --absname
==================
 `--absname'
  Filenames should expand to absolute pathnames.
  N.B. This is an experimental option. It may become deprecated.

Node: Subsection A-3-21,	Next: Section A-4,	Prev: Subsection A-3-20,	Up: Section A-3
  

A.3.21   variable definition
============================

`name=[value]'
  omake variables can also be defined on the command line in the form
`name=value'. For example, the `CFLAGS' variable might be defined on the
command line with the argument `CFLAGS="-Wall -g"'.

Node: Section A-4,	Next: Section A-5,	Prev: Section A-3,	Up: Appendix A
  

A.4   Additional options
*=*=*=*=*=*=*=*=*=*=*=*=

  
  In addition, omake supports a number of debugging flags on the command
line. Run `omake --help' to get a summary of these flags.

Node: Section A-5,	Next: Subsection A-5-1,	Prev: Section A-4,	Up: Appendix A
  

A.5   Environment variables
*=*=*=*=*=*=*=*=*=*=*=*=*=*

  
* Menu:

* Subsection A-5-1::	OMAKEFLAGS
* Subsection A-5-2::	OMAKELIB


Node: Subsection A-5-1,	Next: Subsection A-5-2,	Prev: Section A-5,	Up: Section A-5
  

A.5.1   OMAKEFLAGS
==================
   
  If defines, the `OMAKEFLAGS' should specify a set of options exactly
as they are specified on the command line.

Node: Subsection A-5-2,	Next: Section A-6,	Prev: Subsection A-5-1,	Up: Section A-5
  

A.5.2   OMAKELIB
================
   
  If defined, the `OMAKELIB' environment variable should refer to the
installed location of the OMake standard library. This is the directory
that contains `Pervasives.om' etc. On a Unix system, this is often
`/usr/lib/omake' or `/usr/local/lib/omake', and on Win32 systems it is
often `c:\Program Files\OMake\lib'.
  If not defined, `omake' uses the default configured location. You
should normally leave this unset.

Node: Section A-6,	Next: Subsection A-6-1,	Prev: Section A-5,	Up: Appendix A
  

A.6   Functions
*=*=*=*=*=*=*=*

  
* Menu:

* Subsection A-6-1::	OMakeFlags


Node: Subsection A-6-1,	Next: Section A-7,	Prev: Section A-6,	Up: Section A-6
  

A.6.1   OMakeFlags
==================
  
  The `OMakeFlags' function can be used within an `OMakefile' to modify
the set of options. The options should be specified exactly as they are
on the command line. For example, if you want some specific project to
be silent and display a progress bar, you can add the following line to
your `OMakefile'.
<<    OMakeFlags(-S --progress)
>>
  
  For options where it makes sense, the options are scoped like
variables. For example, if you want OMake to be silent for a single rule
(instead of for the entire project), you can use scoping the restrict
the range of the option.
<<    section
          # Do not display command output when foo is constructed
          OMakeFlags(-S)
  
          foo: fee
             echo "This is a generated file" > foo
             cat fee >> foo
             chmod 555 foo
>>
  

Node: Section A-7,	Next: Section A-8,	Prev: Section A-6,	Up: Appendix A
  

A.7   Option processing
*=*=*=*=*=*=*=*=*=*=*=*

  
  When `omake' is invoked, the options are processed in the following
order.
  
  
 1. All options specified by the `OMAKEFLAGS' environment variable are
   defined globally. 
 2. All options from the command line are defined globally. 
 3. Any individual calls the the `OMakeFlags' function modify the
   options locally. 
  

Node: Section A-8,	Next: Appendix B,	Prev: Section A-7,	Up: Appendix A
  

A.8   .omakerc
*=*=*=*=*=*=*=

    
  If the `$(HOME)/.omakerc' exists, it is read before any of the
`OMakefiles' in your project. The `.omakerc' file is frequently used for
user-specific customization. For example, instead of defining the
`OMAKEFLAGS' environment variable, you could add a line to your
`.omakerc'.
<<    $(HOME)/.omakerc:
          # My private options
          OMakeFlags(-S --progress)
>>
  
   

Node: Appendix B,	Next: Section B-1,	Prev: Appendix A,	Up: Top
  

Appendix B     OMake grammar
****************************
    
* Menu:

* Section B-1::	OMake lexical conventions
* Section B-2::	The OMake grammar
* Section B-3::	Dollar modifiers


Node: Section B-1,	Next: Subsection B-1-1,	Prev: Appendix B,	Up: Appendix B
  

B.1   OMake lexical conventions
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

  
  The OMake language is based on the language for GNU/BSD make, where
there are few lexical conventions. Strictly speaking, there are no
keywords, and few special symbols.
* Menu:

* Subsection B-1-1::	Comments
* Subsection B-1-2::	Special characters
* Subsection B-1-3::	Identifiers
* Subsection B-1-4::	Command identifiers
* Subsection B-1-5::	Variable references
* Subsection B-1-6::	String constants


Node: Subsection B-1-1,	Next: Subsection B-1-2,	Prev: Section B-1,	Up: Section B-1
  

B.1.1   Comments
================
  
  Comments begin with the `#' character and continue to the end-of-line.
Text within a comment is unrestricted.
  Examples.
<<   # This is a comment
     # This $comment contains a quote " character
>>
  

Node: Subsection B-1-2,	Next: Subsection B-1-3,	Prev: Subsection B-1-1,	Up: Section B-1
  

B.1.2   Special characters
==========================
  
  The following characters are special in some contexts.
<<   $    (    )    ,    .   =    :    "    '    `    \    #
>>
  
  
  
 - `$' is used to denote a variable reference, or function application. 
 - Parentheses `)', `(' are argument deliminters. 
 - The command `,' is an argument separator. 
 - The period symbol `.' is a name separator. 
 - The equality symbol `=' denotes a definition. 
 - The colon symbol `:' is used to denote rules, and (optionally) to
   indicate that an expression is followed by an indented body. 
 - The quotation symbols `"' and `'' delimit character strings. 
 - The symbol `#' is the first character of a constant. 
 - The escape symbol `\' is special only when followed by another
   special character. In this case, the special status of the second
   character is removed, and the sequence denotes the second character.
   Otherwise, the `\' is not special.
 Examples:
 
     
    - `\$': the `$' character (as a normal character). 
    - `\#': the `#' character (as a normal character). 
    - `\\': the `\' character (as a normal character). 
    - `c\:\Windows\moo\#boo': the string `c:\Windows\moo#boo'. 
  
  

Node: Subsection B-1-3,	Next: Subsection B-1-4,	Prev: Subsection B-1-2,	Up: Section B-1
  

B.1.3   Identifiers
===================
  
  Identifiers (variable names) are drawn from the ASCII alphanumeric
characters as well as `_', `-', `~', `@'. Case is significant; the
following identifiers are distinct: `FOO', `Foo', `foo'. The identifier
may begin with any of the valid characters, including digits.
  Using `egrep' notation, the regular expression for identifiers is
defined as follows.
<<    identifier ::= [-@~_A-Za-z0-9]+
>>
  
  The following are legal identifiers.
<<    Xyz    hello_world    seventy@nine
      79-32  Gnus~Gnats     CFLAGS
>>
  
  The following are not legal identifiers.
<<    x+y    hello&world
>>
  

Node: Subsection B-1-4,	Next: Subsection B-1-5,	Prev: Subsection B-1-3,	Up: Section B-1
  

B.1.4   Command identifiers
===========================
  
  The following words have special significance when they occur as the
first word of a program line. They are not otherwise special.
<<    case     catch  class    declare    default
      do       else   elseif   export     extends
      finally  if     import   include    match
      open     raise  return   section    switch
      try      value  when     while
>>
  

Node: Subsection B-1-5,	Next: Subsection B-1-6,	Prev: Subsection B-1-4,	Up: Section B-1
  

B.1.5   Variable references
===========================
  
  A variable reference is denoted with the `$' special character
followed by an identifier. If the identifier name has more than one
character, it must be enclosed in parentheses. The parenthesized version
is most common. The following are legal variable references.
<<    $(Xyz)    $(hello_world)   $(seventy@nine)
      $(79-32)  $(Gnus~Gnats)    $(CFLAGS)
>>
  
  Single-character references also include several additional
identifiers, including `&*<^?]['. The following are legal
single-character references.
<<   $@   $&   $*   $<   $^   $+   $?   $[   $]
     $A   $_   $a   $b   $x   $1   $2   $3
>>
  
  Note that a non-parenthesized variable reference is limited to a
single character, even if it is followed by additional legal identifier
charqcters. Suppose the value of the `$x' variable is 17. The following
examples illustrate evaluation.
<<    $x           evaluates to    17
      foo$xbar     evaluates to    foo17bar
      foo$(x)bar   evaluates to    foo17bar
>>
  
  The special sequence `$$' represents the character literal `$'. That
is, the two-character sequences `\$' and `$$' are normally equalivalent.

Node: Subsection B-1-6,	Next: Section B-2,	Prev: Subsection B-1-5,	Up: Section B-1
  

B.1.6   String constants
========================
   
  Literal strings are defined with matching string delimiters. A left
string delimiter begins with the dollar-sign `$', and a non-zero number
of single-quote or double-quote characters. The string is terminated
with a matching sequence of quotation symbols. The delimiter quotation
may not be mixed; it must contain only single-quote characters, or
double-quote characters. The following are legal strings.
<<    $'Hello world'
      $"""printf("Hello world\n")"""
      $''''
  Large "block" of
  text # spanning ''multiple'' lines''''
>>
  
  The string delimiters are not included in the string constant. In the
single-quote form, the contents of the string are interpreted
verbatim--there are no special characters.
  The double-quote form permits expression evaluation within the string,
denoted with the `$' symbol. The following are some examples.
<<    X = Hello
      Y = $""$X world""             # Hello world
      Z = $'''$X world'''           # $X world
      I = 3
      W = $"6 > $(add $I, 2)"       # 6 > 5
>>
  
  Note that quotation symbols without a leading `$' are not treated
specially by OMake. The quotation symbols is included in the sequence.
<<    osh>println('Hello world')
      'Hello world'
      osh>println($'Hello world')
      Hello world
      osh>X = Hello
      - : "Hello" : Sequence
      osh>println('$X world')
      Hello world
>>
  

Node: Section B-2,	Next: Subsection B-2-1,	Prev: Section B-1,	Up: Appendix B
  

B.2   The OMake grammar
*=*=*=*=*=*=*=*=*=*=*=*

  
  OMake programs are constructed from expressions and statements.
Generally, an input program consists of a sequence of statements, each
of which consists of one or more lines. Indentation is significant--if a
statement consists of more than one line, the second and remaining lines
(called the body) are usually indented relative to the first line.
* Menu:

* Subsection B-2-1::	Expressions
* Subsection B-2-2::	Statements and programs


Node: Subsection B-2-1,	Next: Subsection B-2-2,	Prev: Section B-2,	Up: Section B-2
  

B.2.1   Expressions
===================
  
  The following table lists the syntax for expressions.
   expr ::=                                             
            (empty)                                     
            -- Text (see note)                          
         |  text                                        
         |  string-literal                              
            -- Applications                             
         |  dollar `<char>'                             
         |  dollar `(' pathid args `)'                  
            -- Concatenation                            
         |  expr expr                                   
                                                        
 dollar ::= `$' | `$`' | `$,'                           
 pathid ::=                                             
            id                                          
         |  pathid `.' id                               
                                                        
    arg ::= expr -- excluding special characters `)(,') 
   args ::= (empty) | arg, ..., arg                     
  
  An expression is a sequence composed of text, string-literals,
variables references and function applications. Text is any sequence of
non-special characters.
  

B.2.1.1   Inline applications
-----------------------------
  
  An application is the application of a function to zero-or-more
arguments. Inline applications begin with one of the "dollar" sequences
`$', `$`', or `$,'. The application itself is specified as a single
character (in which case it is a variable reference), or it is a
parenthesized list including a function identifier pathid, and
zero-or-more comma-separated arguments args. The arguments are
themselves a variant of the expressions where the special character
`)(,' are not allowed (though any of these may be made non-special with
the `\' escape character). The following are some examples of valid
expressions.
  
  
 - `xyz abc'
 The text sequence "`xyz abc'"
 
 - `xyz$wabc'
 A text sequence containing a reference to the variable `w'.
 
 - `$(addsuffix .c, $(FILES))'
 An application of the function `addsuffix', with first argument `.c',
   and second argument `$(FILES)'.
 
 - `$(a.b.c 12)'
 This is a method call. The variable `a' must evaluate to an object with
   a field `b', which must be an object with a method `c'. This method
   is called with argument `12'. 
  
  The additional dollar sequences specify evaluation order, `$`' (lazy)
and `$,' (eager), as discussed in the section on dollar modifiers
(Section B.3*Note Section B-3::).

Node: Subsection B-2-2,	Next: Section B-3,	Prev: Subsection B-2-1,	Up: Section B-2
  

B.2.2   Statements and programs
===============================
  
  The following table lists the syntax of statements and programs.
         params ::= (empty) | id, ..., id                               
        
                                                                        
        
         target ::= expr -- excluding special character `:'             
        
                                                                        
        
        program ::= stmt `<eol>' ... `<eol>' stmt                       
        
                                                                        
        
           stmt ::=                                                     
        
                    -- Special forms                                    
        
                 |  command expr optcolon-body                          
        
                 |  command ( args ) optcolon-body                      
        
                 |  catch id ( id ) optcolon-body                       
        
                 |  class id ... id                                     
        
                                                                        
        
                    -- Variable definitions                             
        
                 |  pathid {+}= expr                                    
        
                 |  pathid {+}= `<eol>' indented-body                   
        
                 |  pathid`[]' {+}= expr                                
        
                 |  pathid`[]' {+}= `<eol>' indented-exprs              
        
                                                                        
        
                    -- Functions                                        
        
                 |  pathid(args) optcolon-body                          
        
                 |  pathid(params) = `<eol>' indented-body              
        
                                                                        
        
                    -- Objects                                          
        
                 |  pathid `.' {+}= `<eol>' indented-body               
        
                                                                        
        
                    -- Rules                                            
        
                 |  target : target rule-options `<eol>' indented-body  
        
                 |  target :: target rule-options `<eol>' indented-body 
        
                 |  target : target : target rule-options `<eol>'
indented-body  
                 |  target :: target : target rule-options `<eol>'
indented-body 
                                                                        
        
                    -- Shell commands                                   
        
                 |  expr                                                
        
                                                                        
        
  indented-body ::= (empty)                                             
        
                 |  indented-stmt `<eol>' ... `<eol>' indented-stmt     
        
                                                                        
        
 indented-exprs ::= (empty)                                             
        
                 |  indented-expr `<eol>' ... `<eol>' indented-expr     
        
                                                                        
        
  optcolon-body ::= (empty)                                             
        
                 |  `<eol>' indented-body                               
        
                 |  : `<eol>' indented-body                             
        
                                                                        
        
    rule-option ::= :id: target                                         
        
   rule-options ::= (empty)                                             
        
                 |  rule-options rule-option                            
        
  
  

B.2.2.1   Special forms
-----------------------
  
  The special forms include the following.
Conditionals
(see the section on conditionals --- Section
4.9*Note Section 4-9::). The `if' command should be
followed by an expression that represents the condition, and an indented
body. The conditional may be followed by `elseif' and `else' blocks.
<<    if expr
          indented-body
      elseif expr
          indented-body
      ...
      else
          indented-body
>>
  
matching (see the section on matching --- Section
4.10*Note Section 4-10::). The `switch' and `match' commands
perform pattern-matching. All cases are optional. Each case may include
`when' clauses that specify additional matching conditions.
<<    match(expr)
      case expr
         indented-body
      when expr
         indented-body
      ...
      case expr
         indented-body
      default
         indented-body
>>
  
Exceptions (see also the 'try' function
documentation). The `try' command introduces an exception handler. Each
`name' is the name of a class. All cases, including `catch', `default',
and `finally' are optional. The `catch' and `default' clauses contain
optional `when' clauses.
<<    try
          indented-body
      catch name1(id1)
          indented-body
      when expr
          indented-body
      ...
      catch nameN(idN)
          indented-body
      default
          indented-body
      finally
          indented-body
>>
  
  The `raise' command is used to raise an exception.
<<    raise expr
>>
  
section (see the `section' description in Section
4.8*Note Section 4-8::). The `section' command introduces a new
scope.
<<    section
          indented-body
>>
  
include, open (see also Section
4.7*Note Section 4-7::). The `include' command performs file
inclusion. The expression should evaluate to a file name.
  The `open' form is like include, but it performs the inclusion only if
the inclusion has not already been performed. The `open' form is usually
used to include library files. [jyh-- this behavior will change in
subsequent revisions.]
<<    include expr
      open expr
>>
  
return (see the description of functions in Section
4.5*Note Section 4-5::). The `return' command terminates
execution and returns a value from a function.
<<    return expr
>>
  
value (see the description of functions in Section
4.5*Note Section 4-5::). The `value' command is an identity.
Syntactically, it is used to coerce a n expression to a statement.
<<    value expr
>>
  
export (see the section on scoping --- Section
5.3*Note Section 5-3::). The `export' command exports a
environment from a nested block. If no arguments are given, the entire
environment is exported. Otherwise, the export is limited to the
specified identifiers.
<<    export expr
>>
  
while (see also the 'while' function description).
The `while' command introduces a `while' loop.
<<    while expr
          indented-body
>>
  
class, extends (see the section on
objects --- Section 4.11*Note Section 4-11::). The `class'
command specifies an identifier for an object. The `extends' command
specifies a parent object.
<<    class id
      extends expr
>>
  
  

B.2.2.2   Variable definitions
------------------------------
  
  See the section on variables (Section
4.1*Note Section 4-1::). The simplest variable definition has
the following syntax. The `=' form is a new definition. The += form
appends the value to an existing definition.
<<    id = expr
      id += expr
  
      osh> X = 1
      - : "1" : Sequence
      osh> X += 7
      - : "1" " " "7" : Sequence
>>
  
  A multi-line form is allowed, where the value is computed by an
indented body.
<<    id {+}=
          indented-body
  
      osh> X =
               Y = HOME
               println(Y is $Y)
               getenv($Y)
      Y is HOME
      - : "/home/jyh" : Sequence
>>
  
  The name may be qualified qith one of the `public', `prtected', or
`private' modifiers. Public variables are dynamically scoped. Protected
variables are fields in the current object. Private variables are
statically scoped.
  [jyh: revision 0.9.9 introduces modular namespaces; the meaning of
these qualifiers is slightly changed.]
<<    public.X = $(addsuffix .c, 1 2 3)
      protected.Y = $(getenv HOME)
      private.Z = $"Hello world"
>>
  
  

B.2.2.3   Applications and function definitions
-----------------------------------------------
  
  See the section on functions (Section
4.5*Note Section 4-5::). A function-application statement is
specified as a function name, followed a parenthesized list of
comma-separated arguments.
<<    osh> println($"Hello world")
  
      osh> FILES = 1 2 3
      - : 1 2 3
      osh> addsuffix(.c, $(FILES))
      - : 1.c 2.c 3.c
  
      # The following forms are equivalent
      osh> value $(println $"Hello world")
      osh> value $(addsuffix .c, $(FILES))
      - : 1.c 2.c 3.c
>>
  
  If the function application has a body, the body is passed (lazily) to
the function as its first argument. [jyh: in revision 0.9.8 support is
incomplete.] When using `osh', the application must be followed by a
colon `:' to indicate that the application has a body.
<<    # In its 3-argument form, the foreach function takes
      # a body, a variable, and an array.  The body is evaluated
      # for each element of the array, with the variable bound to
      # the element value.
      #
      # The colon is required only for interactive sessions.
      osh> foreach(x, 1 2 3):
              add($x, 1)
      - : 2 3 4
>>
  
  Functions are defined in a similar form, where the parameter list is
specified as a comma-separated list of identifiers, and the body of the
function is indented.
<<    osh> f(i, j) =
              add($i, $j)
      - : <fun 2>
      osh> f(3, 7)
      - : 10 : Int
>>
  
  

B.2.2.4   Objects
-----------------
  
  See the section on objects (Section 4.11*Note Section 4-11::).
Objects are defined as an identifier with a terminal period. The body of
the object is indented.
<<    Obj. =
          class Obj
  
          X = 1
          Y = $(sub $X, 12)
          new(i, j) =
             X = $i
             Y = $j
             value $(this)
          F() =
             add($X, $Y)
          println($Y)
>>
  
  The body of the object has the usual form of an indented body, but new
variable definitions are added to the object, not the global
environment. The object definition above defines an object with (at
least) the fields `X' and `Y', and methods `new' and `F'. The name of
the object is defined with the `class' command as `Obj'.
  The `Obj' itself has fields `X = 1' and `Y = -11'. The `new' method
has the typical form of a constructor-style method, where the fields of
the object are initialized to new values, and the new object returned
(`$(this)' refers to the current object).
  The `F' method returns the sum of the two fields `X' and `Y'.
  When used in an object definition, the += form adds the new
definitions to an existing object.
<<   pair. =
        x = 1
        y = 2
  
     pair. +=
        y = $(add $y, 3)
     # pair now has fields (x = 1, and y = 5)
>>
  
  The `extends' form specifies inheritance. Multiple inheritance is
allowed. At evaluation time, the `extends' directive performs inclusion
of the entire parent object.
<<   pair. =
        x = 1
        y = 2
  
     depth. =
        z = 3
        zoom(dz) =
           z = $(add $z, $(dz))
           return $(this)
  
     triple. =
        extends $(pair)
        extends $(depth)
  
        crazy() =
           zoom($(mul $x, $y))
>>
  
  In this example, the `triple' object has three fields x, y, and z; and
two methods `zoom' and `crazy'.
  

B.2.2.5   Rules
---------------
  
  See the chapter on rules (Chapter 7*Note Chapter 7::). A rule
has the following parts. 
  
 1. A sequence of targets; 
 2. one or two colons; 
 3. a sequence of dependencies and rule options; 
 4. and an indented body. 
  
  The targets are the files to be built, and the dependencies are the
files it depends on. If two colons are specified, it indicates that
there may be multiple rules to build the given targets; otherwise only
one rule is allowed.
  If the target contains a `%' character, the rule is called implicit,
and is considered whenever a file matching that pattern is to be built.
For example, the following rule specifies a default rule for compiling
OCaml files.
<<    %.cmo: %.ml %.mli
         $(OCAMLC) -c $<
>>
  
  This rule would be consulted as a default way of building any file
with a `.cmo' suffix. The dependencies list is also constructed based on
the pattern match. For example, if this rule were used to build a file
`foo.cmo', then the dependency list would be `foo.ml foo.mli'.
  There is also a three-part version of a rule, where the rule
specification has three parts.
<<    targets : pattern : dependencies rule-options
         indented-body
>>
  
  In this case, the pattern must contain a single `%' character. However
this is considered to be a sequence of explicit rules, where each target
is matched against the pattern, and a new rule is computed based on the
pattern match. For example, the following rule specifies how to build
the explicit targets `a.cmo' and `b.cmo'.
<<    a.cmo b.cmo: %.cmo: %.ml %.mli
         $(OCAMLC) -c $<
>>
  
  This example is equivalent to the following two-rule sequence.
<<    a.cmo: a.ml a.mli
         $(OCAMLC) -c $<
      b.cmo: b.ml b.mli
         $(OCAMLC) -c $<
>>
  
  There are several special targets, including the following.
  
  
 - `.PHONY' : declare a "phony" target. That is, the target does not
   correspond to a file. 
 - `.ORDER' : declare a rule for dependency ordering. 
 - `.INCLUDE' : define a rule to generate a file for textual inclusion. 
 - `.SUBDIRS' : specify subdirectories that are part of the project. 
 - `.SCANNER' : define a rule for dependency scanning. 
  
  There are several rule options.
  
  
 - `:optional: dependencies' the subsequent dependencies are optional,
   it is acceptable if they do not exist. 
 - `:exists: dependencies' the subsequent dependencies must exist, but
   changes to not affect whether this rule is considered out-of-date. 
 - `:effects: targets' the subsequent files are side-effects of the
   rule. That is, they may be created and/or modified while the rule is
   executing. Rules with overlapping side-effects are never executed in
   parallel. 
 - `:scanner: name' the subsequent name is the name of the `.SCANNER'
   rule for the target to be built. 
 - `:value: expr' the `expr' is a "value" dependency. The rule is
   considered out-of-date whenever the value of the `expr' changes. 
  
  Several variables are defined during rule evaluation.
  
  
 - `$*' : the name of the target with
   the outermost suffix removed. 
 - `$>' : the name of the target with
   all suffixes removed. 
 - `$@' : the name of the target. 
 - `$^' : the explicit file
   dependencies, sorted alphabetically, with duplicates removed. 
 - `$+' : all explicit file
   dependencies, with order preserved. 
 - `$<' : the first explicit file
   dependency. 
 - `$&' : the free values of the rule
   (often used in `:value:' dependencies). 
  
  

B.2.2.6   Shell commands
------------------------
  
  See the chapter on shell commands (Chapter
10*Note Chapter 10::).
  While it is possible to give a precise specification of shell
commands, the informal description is simpler. Any non-empty statement
where each prefix is not one of the other statements, is considered to
be a shell command. Here are some examples.
<<    ls                                 -- shell command
      echo Hello world > /dev/null       -- shell command
      echo(Hello world)                  -- function application
      echo(Hello world) > /dev/null      -- syntax error
      echo Hello: world                  -- rule
      X=1 getenv X                       -- variable definition
      env X=1 getenv X                   -- shell command
      if true                            -- special form
      \if true                           -- shell command
      "if" true                          -- shell command
>>
  

Node: Section B-3,	Next: Appendix C,	Prev: Section B-2,	Up: Appendix B
  

B.3   Dollar modifiers
*=*=*=*=*=*=*=*=*=*=*=

   
  Inline applications have a function and zero-or-more arguments.
Evaluation is normally strict: when an application is evaluated, the
function identifier is evaluated to a function, the arguments are then
evaluated and the function is called with the evaluated arguments.
  The additional "dollar" sequences specify additional control over
evaluation. The token `$`' defines a "lazy" application, where
evaluation is delayed until a value is required. The `$,' sequence
performs an "eager" application within a lazy context.
  To illustrate, consider the expression `$(addsuffix .c, $(FILES))'.
The `addsuffix' function appends its first argument to each value in its
second argument. The following `osh' interaction demonstrates the normal
bahavior.
<<osh> FILES[] = a b c
  - : <array a b c>
  osh> X = $(addsuffix .c, $(FILES))
  - : <array ...>
  osh> FILES[] = 1 2 3 # redefine FILES
  - : <array 1 2 3>
  osh> println($"$X")  # force the evaluation and print
  a.c b.c c.c
>>
  
  When the lazy operator `$`' is used instead, evaluation is delayed
until it is printed. In the following sample, the value for `X' has
changed to the `$(apply ..)' form, but otherwise the result is unchanged
because it it printed immediately.
<<osh> FILES[] = a b c
  - : <array a b c>
  osh> SUF = .c
  - : ".c"
  osh> X = $`(addsuffix $(SUF), $(FILES))
  - : $(apply global.addsuffix ...)
  osh> println($"$X")  # force the evaluation and print
  a.c b.c c.c
>>
  
  However, consider what happens if we redefine the `FILES' variable
after the definition for `X'. In the following sample, the result
changes because evaluation occurs after the values for `FILES' has been
redefined.
<<osh> FILES[] = a b c
  - : <array a b c>
  osh> SUF = .c
  - : ".c"
  osh> X = $`(addsuffix $(SUF), $(FILES))
  - : $(apply global.addsuffix ...)
  osh> SUF = .x
  osh> FILES[] = 1 2 3
  osh> println($"$X")  # force the evaluation and print
  1.x 2.x 3.x
>>
  
  In some cases, more explicit control is desired over evaluation. For
example, we may wish to evaluate `SUF' early, but allow for changes to
the `FILES' variable. The `$,(SUF)' expression forces early evaluation.
<<osh> FILES[] = a b c
  - : <array a b c>
  osh> SUF = .c
  - : ".c"
  osh> X = $`(addsuffix $,(SUF), $(FILES))
  - : $(apply global.addsuffix ...)
  osh> SUF = .x
  osh> FILES[] = 1 2 3
  osh> println($"$X")  # force the evaluation and print
  1.c 2.c 3.c
>>
  

Node: Appendix C,	Next: Appendix D,	Prev: Appendix B,	Up: Top
  

Appendix C     Index
********************
  
  
 - --absname, A.3.20*Note Subsection A-3-20:: 
 - --all-dependencies, A.3.15*Note Subsection A-3-15:: 
 - --configure, A.3.9*Note Subsection A-3-9:: 
 - --depend, A.3.8*Note Subsection A-3-8:: 
 - --dotomake, A.3.11*Note Subsection A-3-11:: 
 - --force-dotomake, A.3.10*Note Subsection A-3-10:: 
 - --install, A.3.17*Note Subsection A-3-17:: 
 - --install-all, A.3.18*Note Subsection A-3-18:: 
 - --install-force, A.3.19*Note Subsection A-3-19:: 
 - --output-at-end, A.2.11*Note Subsection A-2-11:: 
 - --output-normal, A.2.8*Note Subsection A-2-8:: 
 - --output-only-errors, A.2.10*Note Subsection A-2-10:: 
 - --output-postpone, A.2.9*Note Subsection A-2-9:: 
 - --print-dependencies, A.3.13*Note Subsection A-3-13:: 
 - --print-exit, A.2.6*Note Subsection A-2-6:: 
 - --print-status, A.2.5*Note Subsection A-2-5:: 
 - --progress, A.2.4*Note Subsection A-2-4:: 
 - --show-dependencies, A.3.14*Note Subsection A-3-14:: 
 - --verbose, A.2.7*Note Subsection A-2-7:: 
 - --verbose-dependencies, A.3.16*Note Subsection A-3-16:: 
 - -j, A.3.12*Note Subsection A-3-12:: 
 - -k, A.3.1*Note Subsection A-3-1:: 
 - -n, A.3.2*Note Subsection A-3-2:: 
 - -o, A.2.12*Note Subsection A-2-12:: 
 - -P, A.3.4*Note Subsection A-3-4:: 
 - -p, A.3.3*Note Subsection A-3-3:: 
 - -R, A.3.5*Note Subsection A-3-5:: 
 - -S, A.2.2*Note Subsection A-2-2:: 
 - -s, A.2.1*Note Subsection A-2-1:: 
 - -t, A.3.6*Note Subsection A-3-6:: 
 - -U, A.3.7*Note Subsection A-3-7:: 
 - -w, A.2.3*Note Subsection A-2-3:: 
 
 - .BUILD_BEGIN, 12.1*Note Section 12-1:: 
 - .BUILD_FAILURE, 12.1*Note Section 12-1:: 
 - .BUILD_SUCCESS, 12.1*Note Section 12-1:: 
 - .BUILDORDER, 9.3.5*Note Subsection 9-3-5:: 
 - .DEFAULT, 7.7*Note Section 7-7::, 7.12.1*Note Subsection 7-12-1:: 
 - .INCLUDE, 7.9*Note Section 7-9:: 
 - .ORDER, 9.3.5*Note Subsection 9-3-5:: 
 - .omakerc, A.8*Note Section A-8:: 
 - .PHONY, 5.3*Note Section 5-3::, 7.10*Note Section 7-10::,
   7.11.3*Note Subsection 7-11-3::, 7.12.1*Note Subsection 7-12-1::,
   7.12.2*Note Subsection 7-12-2:: 
 - .RULE, 5.3*Note Section 5-3:: 
 - .SCANNER, 3.4.3*Note Subsection 3-4-3::, 7.6*Note Section 7-6::,
   7.11.2*Note Subsection 7-11-2:: 
 - .SUBDIRS, 3*Note Chapter 3::, 7.8*Note Section 7-8:: 
 - .SUBDIRS bodies, 3.5*Note Section 3-5:: 
 
 - :effects:, 7.5.2*Note Subsection 7-5-2:: 
 - :exists:, 7.5.1*Note Subsection 7-5-1:: 
 - :scanner:, 7.6.1*Note Subsection 7-6-1:: 
 - :value:, 7.5.3*Note Subsection 7-5-3:: 
 
 - $&, B.2.2.5*Note Subsection B-2-2:: 
 - $*, 7*Note Chapter 7::, B.2.2.5*Note Subsection B-2-2:: 
 - $+, 7*Note Chapter 7::, B.2.2.5*Note Subsection B-2-2:: 
 - $<, 7*Note Chapter 7::, B.2.2.5*Note Subsection B-2-2:: 
 - $>, B.2.2.5*Note Subsection B-2-2:: 
 - $@, 7*Note Chapter 7::, B.2.2.5*Note Subsection B-2-2:: 
 - $^, 7*Note Chapter 7::, B.2.2.5*Note Subsection B-2-2:: 
 
 - ABORT_ON_COMMAND_ERROR, 12.4.1*Note Subsection 12-4-1:: 
 - ABORT_ON_DEPENDENCY_ERRORS, 12.6.4*Note Subsection 12-6-4:: 
 - AC_MSG_CHECKING, 13.2*Note Section 13-2:: 
 - AC_MSG_ERROR, 13.2*Note Section 13-2:: 
 - AC_MSG_RESULT, 13.2*Note Section 13-2:: 
 - AC_MSG_WARN, 13.2*Note Section 13-2:: 
 - AC_TRY_COMPILE, 13.2*Note Section 13-2:: 
 - AC_TRY_LINK, 13.2*Note Section 13-2:: 
 - AC_TRY_RUN, 13.2*Note Section 13-2:: 
 - AR, 12.5.2*Note Subsection 12-5-2:: 
 - Array, 11.1.7*Note Subsection 11-1-7:: 
 - AS, 12.5.2*Note Subsection 12-5-2:: 
 - ASFLAGS, 12.5.2*Note Subsection 12-5-2:: 
 - ASOUT, 12.5.2*Note Subsection 12-5-2:: 
 - absname, 9.1.9*Note Subsection 9-1-9:: 
 - accept, 9.8.30*Note Subsection 9-8-30:: 
 - add, 8.4.3*Note Subsection 8-4-3:: 
 - add-project-directories, 9.6.2*Note Subsection 9-6-2:: 
 - add-wrapper, 8.3.25*Note Subsection 8-3-25:: 
 - addprefix, 8.3.23*Note Subsection 8-3-23:: 
 - addsuffix, 8.3.17*Note Subsection 8-3-17:: 
 - addsuffixes, 8.3.19*Note Subsection 8-3-19:: 
 - aliases, 14.2*Note Section 14-2:: 
 - and, 8.2.3*Note Subsection 8-2-3:: 
 - apply, 8.5.2*Note Subsection 8-5-2:: 
 - applya, 8.5.3*Note Subsection 8-5-3:: 
 - array, 8.3.1*Note Subsection 8-3-1:: 
 - arrays, 4.3*Note Section 4-3:: 
 - asr, 8.4.3*Note Subsection 8-4-3:: 
 - awk, 3.4.3*Note Subsection 3-4-3::, 9.11.5*Note Subsection 9-11-5:: 
 
 - BIBTEX, 12.7.1*Note Subsection 12-7-1:: 
 - BUILD_SUMMARY, 8.1*Note Section 8-1:: 
 - BYTE_ENABLED, 12.6.2*Note Subsection 12-6-2:: 
 - basename, 9.1.4*Note Subsection 9-1-4:: 
 - bg, 10.10.2*Note Subsection 10-10-2:: 
 - bind, 9.8.28*Note Subsection 9-8-28:: 
 - break, 8.3.41*Note Subsection 8-3-41:: 
 - build model, 3*Note Chapter 3:: 
 
 - CAMLP4, 12.6.2*Note Subsection 12-6-2:: 
 - CC, 12.5.2*Note Subsection 12-5-2:: 
 - CCOUT, 12.5.2*Note Subsection 12-5-2:: 
 - CFLAGS, 12.5.2*Note Subsection 12-5-2:: 
 - CGeneratedFiles, 12.5.3.1*Note Subsection 12-5-3:: 
 - Channel, 11.1.15*Note Subsection 11-1-15:: 
 - CheckCHeader, 13.1.6*Note Subsection 13-1-6:: 
 - CheckCLib, 13.1.7*Note Subsection 13-1-7:: 
 - CheckProg, 13.1.8*Note Subsection 13-1-8:: 
 - CL_FOUND, 12.5.1.2*Note Subsection 12-5-1:: 
 - ConfMsgChecking, 13.1.1*Note Subsection 13-1-1:: 
 - ConfMsgError, 13.1.2*Note Subsection 13-1-2:: 
 - ConfMsgFound, 13.1.3*Note Subsection 13-1-3:: 
 - ConfMsgResult, 13.1.1*Note Subsection 13-1-1:: 
 - ConfMsgWarn, 13.1.2*Note Subsection 13-1-2:: 
 - ConfMsgYesNo, 13.1.3*Note Subsection 13-1-3:: 
 - CPP, 12.5.2*Note Subsection 12-5-2:: 
 - CProgram, 12.5.4.5*Note Subsection 12-5-4:: 
 - CProgramCopy, 12.5.4.6*Note Subsection 12-5-4:: 
 - CProgramInstall, 12.5.4.7*Note Subsection 12-5-4:: 
 - CWD, 12.4.1*Note Subsection 12-4-1:: 
 - CXX, 12.5.2*Note Subsection 12-5-2:: 
 - CXXFLAGS, 12.5.2*Note Subsection 12-5-2:: 
 - CXXProgram, 12.5.4.8*Note Subsection 12-5-4:: 
 - CXXProgramInstall, 12.5.4.8*Note Subsection 12-5-4:: 
 - c-escaped, 8.3.12*Note Subsection 8-3-12:: 
 - capitalize, 8.3.33*Note Subsection 8-3-33:: 
 - case, 8.2.6*Note Subsection 8-2-6:: 
 - cat, 9.11.2*Note Subsection 9-11-2:: 
 - cats and dogs, 3.4*Note Section 3-4:: 
 - cd, 10.9.2*Note Subsection 10-9-2:: 
 - chmod, 9.5.9*Note Subsection 9-5-9:: 
 - chown, 9.5.10*Note Subsection 9-5-10:: 
 - class, B.2.2.1*Note Subsection B-2-2:: 
 - classes, 4.12*Note Section 4-12:: 
 - close, 9.8.5*Note Subsection 9-8-5:: 
 - cmp-versions, 12.2.3*Note Subsection 12-2-3:: 
 - concat, 8.3.3*Note Subsection 8-3-3:: 
 - conditionals, 4.9*Note Section 4-9:: 
 - connect, 9.8.31*Note Subsection 9-8-31:: 
 - create-lazy-map, 8.5.4*Note Subsection 8-5-4:: 
 - create-map, 8.5.4*Note Subsection 8-5-4:: 
 
 - DefineCommandVars, 12.2.4*Note Subsection 12-2-4:: 
 - DIRSEP, 12.4.2*Note Subsection 12-4-2:: 
 - Dir, 11.1.14*Note Subsection 11-1-14:: 
 - DVIPDFM, 12.7.1*Note Subsection 12-7-1:: 
 - DVIPDFMFLAGS, 12.7.1*Note Subsection 12-7-1:: 
 - DVIPS, 12.7.1*Note Subsection 12-7-1:: 
 - DVIPSFLAGS, 12.7.1*Note Subsection 12-7-1:: 
 - decode-uri, 8.3.13*Note Subsection 8-3-13:: 
 - default, 8.2.6*Note Subsection 8-2-6:: 
 - defined, 8.2.10*Note Subsection 8-2-10:: 
 - defined-env, 8.2.11*Note Subsection 8-2-11:: 
 - dependencies, 12.3.1*Note Subsection 12-3-1:: 
 - dependencies-all, 12.3.1*Note Subsection 12-3-1:: 
 - dependencies-proper, 12.3.1*Note Subsection 12-3-1:: 
 - digest, 9.2.5*Note Subsection 9-2-5:: 
 - digest-path, 9.2.7*Note Subsection 9-2-7:: 
 - dir, 9.1.1*Note Subsection 9-1-1:: 
 - dirname, 9.1.5*Note Subsection 9-1-5:: 
 - dirof, 9.1.7*Note Subsection 9-1-7:: 
 - div, 8.4.3*Note Subsection 8-4-3:: 
 - dup, 9.8.12*Note Subsection 9-8-12:: 
 - dup2, 9.8.13*Note Subsection 9-8-13:: 
 
 - EMPTY, 12.4.1*Note Subsection 12-4-1:: 
 - EXE, 12.4.2*Note Subsection 12-4-2:: 
 - EXT_ASM, 12.4.2*Note Subsection 12-4-2:: 
 - EXT_LIB, 12.4.2*Note Subsection 12-4-2:: 
 - EXT_OBJ, 12.4.2*Note Subsection 12-4-2:: 
 - Exception, 11.1.20*Note Subsection 11-1-20:: 
 - echo, 10.9.1*Note Subsection 10-9-1:: 
 - else, 8.2.5*Note Subsection 8-2-5::, B.2.2.1*Note Subsection B-2-2:: 
 - elseif, 8.2.5*Note Subsection 8-2-5::, B.2.2.1*Note Subsection B-2-2::
   
 - encode-uri, 8.3.13*Note Subsection 8-3-13:: 
 - eprint, 9.9*Note Section 9-9:: 
 - eprintln, 9.9*Note Section 9-9:: 
 - eprintv, 9.10*Note Section 9-10:: 
 - eprintvln, 9.10*Note Section 9-10:: 
 - eq, 8.4.4*Note Subsection 8-4-4:: 
 - equal, 8.2.2*Note Subsection 8-2-2:: 
 - exists-in-path, 9.2.4*Note Subsection 9-2-4:: 
 - exit, 8.2.9*Note Subsection 8-2-9:: 
 - export, 5.3*Note Section 5-3::, 8.3.39*Note Subsection 8-3-39::,
   B.2.2.1*Note Subsection B-2-2:: 
 - extends, B.2.2.1*Note Subsection B-2-2:: 
 
 - File, 11.1.13*Note Subsection 11-1-13:: 
 - Float, 11.1.5*Note Subsection 11-1-5:: 
 - Fun, 11.1.9*Note Subsection 11-1-9:: 
 - fg, 10.10.3*Note Subsection 10-10-3:: 
 - fgets, 9.8.34*Note Subsection 9-8-34:: 
 - file, 9.1.1*Note Subsection 9-1-1:: 
 - file-check-sort, 9.3.6*Note Subsection 9-3-6:: 
 - file-exists, 9.3.1*Note Subsection 9-3-1:: 
 - file-sort, 9.3.5*Note Subsection 9-3-5:: 
 - filter, 8.3.31*Note Subsection 8-3-31:: 
 - filter-exists, 9.3.3*Note Subsection 9-3-3:: 
 - filter-out, 8.3.32*Note Subsection 8-3-32:: 
 - filter-proper-targets, 9.3.3*Note Subsection 9-3-3:: 
 - filter-targets, 9.3.3*Note Subsection 9-3-3:: 
 - find, 9.7.2*Note Subsection 9-7-2:: 
 - find-build-targets, 12.3.3*Note Subsection 12-3-3:: 
 - find-in-path, 9.2.6*Note Subsection 9-2-6:: 
 - find-targets-in-path, 9.3.4*Note Subsection 9-3-4:: 
 - find-targets-in-path-optional, 9.3.4*Note Subsection 9-3-4:: 
 - float, 8.4.2*Note Subsection 8-4-2:: 
 - flush, 9.8.11*Note Subsection 9-8-11:: 
 - fopen, 9.8.4*Note Subsection 9-8-4:: 
 - foreach, 8.6.1*Note Subsection 8-6-1:: 
 - fprint, 9.9*Note Section 9-9:: 
 - fprintln, 9.9*Note Section 9-9:: 
 - fprintv, 9.10*Note Section 9-10:: 
 - fprintvln, 9.10*Note Section 9-10:: 
 - fsubst, 9.11.6*Note Subsection 9-11-6:: 
 - fullname, 9.1.8*Note Subsection 9-1-8:: 
 - fun, 8.5.1*Note Subsection 8-5-1:: 
 - functions, 4.5*Note Section 4-5:: 
 
 - GCC_FOUND, 12.5.1.1*Note Subsection 12-5-1:: 
 - Group, 9.11.20*Note Subsection 9-11-20:: 
 - GXX_FOUND, 12.5.1.1*Note Subsection 12-5-1:: 
 - ge, 8.4.4*Note Subsection 8-4-4:: 
 - get-registry, 8.2.15*Note Subsection 8-2-15:: 
 - getchar, 9.8.32*Note Subsection 9-8-32:: 
 - getenv, 8.2.12*Note Subsection 8-2-12:: 
 - getgrgid, 9.11.21*Note Subsection 9-11-21:: 
 - getgrnam, 9.11.21*Note Subsection 9-11-21:: 
 - gethostbyname, 9.8.22*Note Subsection 9-8-22:: 
 - getprotobyname, 9.8.24*Note Subsection 9-8-24:: 
 - getpwents, 9.11.19*Note Subsection 9-11-19:: 
 - getpwnam, 9.11.18*Note Subsection 9-11-18:: 
 - getpwuid, 9.11.18*Note Subsection 9-11-18:: 
 - gets, 9.8.33*Note Subsection 9-8-33:: 
 - getservbyname, 9.8.26*Note Subsection 9-8-26:: 
 - gettimeofday, 9.11.22*Note Subsection 9-11-22:: 
 - getvar, 8.2.16*Note Subsection 8-2-16:: 
 - glob, 9.4.1*Note Subsection 9-4-1:: 
 - gr_gid, 9.11.20*Note Subsection 9-11-20:: 
 - gr_group, 9.11.20*Note Subsection 9-11-20:: 
 - gr_mem, 9.11.20*Note Subsection 9-11-20:: 
 - gr_name, 9.11.20*Note Subsection 9-11-20:: 
 - grep, 9.11.3*Note Subsection 9-11-3:: 
 - gt, 8.4.4*Note Subsection 8-4-4:: 
 
 - HOME, 8.1*Note Section 8-1:: 
 - HOST, 8.1*Note Section 8-1:: 
 - Host, 9.8.21*Note Subsection 9-8-21:: 
 - history, 10.11.1*Note Subsection 10-11-1:: 
 - homename, 9.1.10*Note Subsection 9-1-10:: 
 - html-escaped, 8.3.12*Note Subsection 8-3-12:: 
 - html-pre-escaped, 8.3.12*Note Subsection 8-3-12:: 
 - html-string, 8.3.16*Note Subsection 8-3-16:: 
 
 - INCLUDES, 12.5.2*Note Subsection 12-5-2:: 
 - INSTALL, 12.4.2*Note Subsection 12-4-2:: 
 - InChannel, 11.1.16*Note Subsection 11-1-16:: 
 - InetAddr, 9.8.20*Note Subsection 9-8-20:: 
 - Int, 11.1.4*Note Subsection 11-1-4:: 
 - id-escaped, 8.3.12*Note Subsection 8-3-12:: 
 - if, 4.9*Note Section 4-9::, 8.2.5*Note Subsection 8-2-5::,
   B.2.2.1*Note Subsection B-2-2:: 
 - ignoreeof, 14.1*Note Section 14-1:: 
 - in, 9.1.3*Note Subsection 9-1-3:: 
 - include, 4.7*Note Section 4-7::, B.2.2.1*Note Subsection B-2-2:: 
 - inheritance, 4.13*Note Section 4-13:: 
 - int, 8.4.1*Note Subsection 8-4-1:: 
 - intersection, 8.3.28*Note Subsection 8-3-28:: 
 - intersects, 8.3.29*Note Subsection 8-3-29:: 
 
 - jobs, 10.10.1*Note Subsection 10-10-1:: 
 - join, 8.3.10*Note Subsection 8-3-10:: 
 
 - kill, 10.10.6*Note Subsection 10-10-6:: 
 
 - LATEX, 12.7.1*Note Subsection 12-7-1:: 
 - LATEXFLAGS, 12.7.1*Note Subsection 12-7-1:: 
 - LaTeXDocument, 12.7.2.1*Note Subsection 12-7-2:: 
 - LaTeXDocumentCopy, 12.7.2.3*Note Subsection 12-7-2:: 
 - LaTeXDocumentInstall, 12.7.2.4*Note Subsection 12-7-2:: 
 - LD, 12.5.2*Note Subsection 12-5-2:: 
 - LDFLAGS, 12.5.2*Note Subsection 12-5-2:: 
 - LDOUT, 12.5.2*Note Subsection 12-5-2:: 
 - LEX, 12.5.2*Note Subsection 12-5-2:: 
 - Lexer, 9.11.9*Note Subsection 9-11-9:: 
 - LIB_FOUND, 12.5.1.2*Note Subsection 12-5-1:: 
 - LIBS, 12.5.2*Note Subsection 12-5-2:: 
 - LocalCGeneratedFiles, 12.5.3.1*Note Subsection 12-5-3:: 
 - LocalOCamlGeneratedFiles, 12.6.5.1*Note Subsection 12-6-5:: 
 - LocalTeXGeneratedFiles, 12.7.2.2*Note Subsection 12-7-2:: 
 - Location, 11.1.18*Note Subsection 11-1-18:: 
 - land, 8.4.3*Note Subsection 8-4-3:: 
 - le, 8.4.4*Note Subsection 8-4-4:: 
 - length, 8.3.4*Note Subsection 8-3-4:: 
 - lex, 9.11.7*Note Subsection 9-11-7:: 
 - lex-search, 9.11.8*Note Subsection 9-11-8:: 
 - link, 9.5.6*Note Subsection 9-5-6:: 
 - link-order sorting, 9.3.5*Note Subsection 9-3-5:: 
 - listen, 9.8.29*Note Subsection 9-8-29:: 
 - lnot, 8.4.3*Note Subsection 8-4-3:: 
 - lockf, 9.8.19*Note Subsection 9-8-19:: 
 - lor, 8.4.3*Note Subsection 8-4-3:: 
 - lowercase, 8.3.36*Note Subsection 8-3-36:: 
 - ls, 9.4.2*Note Subsection 9-4-2:: 
 - lseek, 9.8.8*Note Subsection 9-8-8:: 
 - lsl, 8.4.3*Note Subsection 8-4-3:: 
 - lsr, 8.4.3*Note Subsection 8-4-3:: 
 - lstat, 9.5.3*Note Subsection 9-5-3:: 
 - lt, 8.4.4*Note Subsection 8-4-4:: 
 - lxor, 8.4.3*Note Subsection 8-4-3:: 
 
 - MACHINE, 8.1*Note Section 8-1:: 
 - MAKEINDEX, 12.7.1*Note Subsection 12-7-1:: 
 - Map, 11.1.2*Note Subsection 11-1-2:: 
 - MENHIR_AVAILABLE, 12.6.1*Note Subsection 12-6-1:: 
 - MENHIR_ENABLED, 12.6.2*Note Subsection 12-6-2:: 
 - MENHIR_FLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - mapprefix, 8.3.24*Note Subsection 8-3-24:: 
 - mapsuffix, 8.3.18*Note Subsection 8-3-18:: 
 - match, 4.10*Note Section 4-10::, 8.2.6*Note Subsection 8-2-6::,
   B.2.2.1*Note Subsection B-2-2:: 
 - max, 8.4.3*Note Subsection 8-4-3:: 
 - mem, 8.3.27*Note Subsection 8-3-27:: 
 - min, 8.4.3*Note Subsection 8-4-3:: 
 - mkdir, 9.5.1*Note Subsection 9-5-1:: 
 - mkfifo, 9.8.17*Note Subsection 9-8-17:: 
 - mod, 8.4.3*Note Subsection 8-4-3:: 
 - mul, 8.4.3*Note Subsection 8-4-3:: 
 
 - NATIVE_ENABLED, 12.6.2*Note Subsection 12-6-2:: 
 - NCURSES_AVAILABLE, 13.3.1*Note Subsection 13-3-1:: 
 - NCURSES_TERMH_IN_NCURSES, 13.3.1*Note Subsection 13-3-1:: 
 - NODENAME, 8.1*Note Section 8-1:: 
 - Node, 11.1.12*Note Subsection 11-1-12:: 
 - Number, 11.1.3*Note Subsection 11-1-3:: 
 - neg, 8.4.3*Note Subsection 8-4-3:: 
 - not, 8.2.1*Note Subsection 8-2-1:: 
 - nth, 8.3.5*Note Subsection 8-3-5:: 
 - nth-hd, 8.3.6*Note Subsection 8-3-6:: 
 - nth-tl, 8.3.7*Note Subsection 8-3-7:: 
 
 - Object, 11.1.1*Note Subsection 11-1-1:: 
 - OCAML_BYTE_LINK_FLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAML_CLIBS, 12.6.4*Note Subsection 12-6-4:: 
 - OCAML_LIB_FLAGS, 12.6.4*Note Subsection 12-6-4:: 
 - OCAML_LIBS, 12.6.4*Note Subsection 12-6-4:: 
 - OCAML_LINK_FLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAML_NATIVE_LINK_FLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAML_OTHER_LIBS, 12.6.4*Note Subsection 12-6-4:: 
 - OCAMLC, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLCFLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAMLDEP, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLDEP_MODULES, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLDEP_MODULES_AVAILABLE, 12.6.1*Note Subsection 12-6-1:: 
 - OCAMLDEP_MODULES_ENABLED, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLDEPFLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAMLFIND, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLFIND_EXISTS, 12.6.1*Note Subsection 12-6-1:: 
 - OCAMLFINDFLAGS, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLFLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAMLINCLUDES, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLLEX, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLLEXFLAGS, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLLINK, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLMKTOP, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLOPT, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLOPT_EXISTS, 12.6.1*Note Subsection 12-6-1:: 
 - OCAMLOPTFLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAMLOPTLINK, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLPACKS, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLPPFLAGS, 12.6.3*Note Subsection 12-6-3:: 
 - OCAMLYACC, 12.6.2*Note Subsection 12-6-2:: 
 - OCAMLYACCFLAGS, 12.6.2*Note Subsection 12-6-2:: 
 - OCamlGeneratedFiles, 12.6.5.1*Note Subsection 12-6-5:: 
 - OCamlLibrary, 12.6.6.1*Note Subsection 12-6-6:: 
 - OCamlLibraryCopy, 12.6.6.3*Note Subsection 12-6-6:: 
 - OCamlLibraryInstall, 12.6.6.4*Note Subsection 12-6-6:: 
 - OCamlPackage, 12.6.6.2*Note Subsection 12-6-6:: 
 - OCamlProgram, 12.6.6.5*Note Subsection 12-6-6:: 
 - OCamlProgramCopy, 12.6.6.6*Note Subsection 12-6-6:: 
 - OCamlProgramInstall, 12.6.6.7*Note Subsection 12-6-6:: 
 - OMAKE_VERSION, 8.1*Note Section 8-1:: 
 - OMAKEFLAGS, A.5.1*Note Subsection A-5-1:: 
 - OMAKELIB, A.5.2*Note Subsection A-5-2:: 
 - OMAKEPATH, 8.1*Note Section 8-1:: 
 - OMakeFlags, 12.2.1*Note Subsection 12-2-1:: 
 - OMakefile, 2.8*Note Section 2-8::, 3*Note Chapter 3:: 
 - OMakeroot, 2.8*Note Section 2-8::, 3*Note Chapter 3::,
   12.4*Note Section 12-4:: 
 - OMakeVersion, 12.2.2*Note Subsection 12-2-2:: 
 - OS_VERSION, 8.1*Note Section 8-1:: 
 - OSTYPE, 8.1*Note Section 8-1:: 
 - OutChannel, 11.1.17*Note Subsection 11-1-17:: 
 - objects, 4.11*Note Section 4-11:: 
 - ocaml-escaped, 8.3.12*Note Subsection 8-3-12:: 
 - ocamldep-omake, 12.6.5.2*Note Subsection 12-6-5:: 
 - open, 4.7*Note Section 4-7::, B.2.2.1*Note Subsection B-2-2:: 
 - open-in-string, 9.8.2*Note Subsection 9-8-2:: 
 - open-out-string, 9.8.3*Note Subsection 9-8-3:: 
 - or, 8.2.4*Note Subsection 8-2-4:: 
 - out-string, 9.8.3*Note Subsection 9-8-3:: 
 
 - PATHSEP, 12.4.2*Note Subsection 12-4-2:: 
 - Passwd, 9.11.17*Note Subsection 9-11-17:: 
 - PDFLATEX, 12.7.1*Note Subsection 12-7-1:: 
 - PDFLATEXFLAGS, 12.7.1*Note Subsection 12-7-1:: 
 - PID, 8.1*Note Section 8-1:: 
 - Position, 11.1.19*Note Subsection 11-1-19:: 
 - Protocol, 9.8.23*Note Subsection 9-8-23:: 
 - pipe, 9.8.16*Note Subsection 9-8-16:: 
 - print, 9.9*Note Section 9-9:: 
 - println, 9.9*Note Section 9-9:: 
 - printv, 9.10*Note Section 9-10:: 
 - printvln, 9.10*Note Section 9-10:: 
 - private., 4.15*Note Section 4-15:: 
 - project-directories, 12.3.4*Note Subsection 12-3-4:: 
 - prompt, 14.1*Note Section 14-1:: 
 - protected., 4.16*Note Section 4-16:: 
 - public., 4.17*Note Section 4-17:: 
 - pw_dir, 9.11.17*Note Subsection 9-11-17:: 
 - pw_gecos, 9.11.17*Note Subsection 9-11-17:: 
 - pw_gid, 9.11.17*Note Subsection 9-11-17:: 
 - pw_name, 9.11.17*Note Subsection 9-11-17:: 
 - pw_passwd, 9.11.17*Note Subsection 9-11-17:: 
 - pw_shell, 9.11.17*Note Subsection 9-11-17:: 
 - pw_uid, 9.11.17*Note Subsection 9-11-17:: 
 
 - quotations, 4.4*Note Section 4-4:: 
 - quote, 8.3.14*Note Subsection 8-3-14:: 
 - quote-argv, 8.3.15*Note Subsection 8-3-15:: 
 
 - READLINE_AVAILABLE, 13.3.2*Note Subsection 13-3-2:: 
 - READLINE_CFLAGS, 13.3.2*Note Subsection 13-3-2:: 
 - READLINE_CLIBS, 13.3.2*Note Subsection 13-3-2:: 
 - READLINE_GNU, 13.3.2*Note Subsection 13-3-2:: 
 - ROOT, 12.4.1*Note Subsection 12-4-1:: 
 - Rule, 11.1.10*Note Subsection 11-1-10:: 
 - RunCProg, 13.1.5*Note Subsection 13-1-5:: 
 - RuntimeException, 11.1.21*Note Subsection 11-1-21:: 
 - raise, 8.2.8*Note Subsection 8-2-8:: 
 - random, 8.3.42*Note Subsection 8-3-42:: 
 - random-init, 8.3.42*Note Subsection 8-3-42:: 
 - read, 9.8.6*Note Subsection 9-8-6:: 
 - readlink, 9.5.8*Note Subsection 9-5-8:: 
 - regular expressions, 9.11.1*Note Subsection 9-11-1:: 
 - rehash, 9.2.3*Note Subsection 9-2-3:: 
 - remove-project-directories, 9.6.3*Note Subsection 9-6-3:: 
 - removeprefix, 8.3.20*Note Subsection 8-3-20:: 
 - removesuffix, 8.3.21*Note Subsection 8-3-21:: 
 - rename, 9.5.5*Note Subsection 9-5-5:: 
 - replacesuffixes, 8.3.22*Note Subsection 8-3-22:: 
 - return, 4.5*Note Section 4-5::, B.2.2.1*Note Subsection B-2-2:: 
 - rev, 8.3.9*Note Subsection 8-3-9:: 
 - rewind, 9.8.9*Note Subsection 9-8-9:: 
 - rootname, 9.1.6*Note Subsection 9-1-6:: 
 - rule, 12.3.5*Note Subsection 12-3-5:: 
 - rule, options, 7.5*Note Section 7-5:: 
 - rule, scoping, 7.11*Note Section 7-11:: 
 - rules, bounded implicit, 7.2*Note Section 7-2:: 
 - rules, implicit, 7.1*Note Section 7-1:: 
 
 - SCANNER_MODE, 12.4.1*Note Subsection 12-4-1:: 
 - Sequence, 11.1.6*Note Subsection 11-1-6:: 
 - Service, 9.8.25*Note Subsection 9-8-25:: 
 - Shell, 11.1.23*Note Subsection 11-1-23:: 
 - SNPRINTF_AVAILABLE, 13.3.3*Note Subsection 13-3-3:: 
 - STDLIB, 8.1*Note Section 8-1:: 
 - STDROOT, 12.4.1*Note Subsection 12-4-1:: 
 - Stat, 9.5.2*Note Subsection 9-5-2:: 
 - StaticCLibrary, 12.5.4.1*Note Subsection 12-5-4:: 
 - StaticCLibraryCopy, 12.5.4.2*Note Subsection 12-5-4:: 
 - StaticCLibraryInstall, 12.5.4.3*Note Subsection 12-5-4:: 
 - StaticCObject, 12.5.4.4*Note Subsection 12-5-4:: 
 - StaticCObjectCopy, 12.5.4.4*Note Subsection 12-5-4:: 
 - StaticCObjectInstall, 12.5.4.4*Note Subsection 12-5-4:: 
 - StaticCXXLibrary, 12.5.4.9*Note Subsection 12-5-4:: 
 - StaticCXXLibraryCopy, 12.5.4.9*Note Subsection 12-5-4:: 
 - StaticCXXLibraryInstall, 12.5.4.9*Note Subsection 12-5-4:: 
 - String, 11.1.8*Note Subsection 11-1-8:: 
 - SYSNAME, 8.1*Note Section 8-1:: 
 - scan, 9.11.4*Note Subsection 9-11-4:: 
 - section, 4.8*Note Section 4-8::, 7.3*Note Section 7-3::,
   B.2.2.1*Note Subsection B-2-2:: 
 - section rule, 7.4*Note Section 7-4:: 
 - select, 9.8.18*Note Subsection 9-8-18:: 
 - set, 8.3.26*Note Subsection 8-3-26:: 
 - set-close-on-exec-mode, 9.8.15*Note Subsection 9-8-15:: 
 - set-diff, 8.3.30*Note Subsection 8-3-30:: 
 - set-nonblock, 9.8.14*Note Subsection 9-8-14:: 
 - setenv, 8.2.13*Note Subsection 8-2-13:: 
 - setvar, 8.2.17*Note Subsection 8-2-17:: 
 - shell, 8.3.38*Note Subsection 8-3-38:: 
 - socket, 9.8.27*Note Subsection 9-8-27:: 
 - sorting (link-order), 9.3.5*Note Subsection 9-3-5:: 
 - split, 8.3.2*Note Subsection 8-3-2:: 
 - stat, 9.5.3*Note Subsection 9-5-3:: 
 - stat-reset, 9.3.2*Note Subsection 9-3-2:: 
 - static., 4.18*Note Section 4-18:: 
 - stderr, 9.8.1*Note Subsection 9-8-1:: 
 - stdin, 9.8.1*Note Subsection 9-8-1:: 
 - stdout, 9.8.1*Note Subsection 9-8-1:: 
 - stop, 10.10.4*Note Subsection 10-10-4:: 
 - string, 8.3.11*Note Subsection 8-3-11:: 
 - string-escaped, 8.3.12*Note Subsection 8-3-12:: 
 - sub, 8.4.3*Note Subsection 8-4-3:: 
 - subdirs, 9.4.3*Note Subsection 9-4-3:: 
 - subrange, 8.3.8*Note Subsection 8-3-8:: 
 - suffix, 9.1.11*Note Subsection 9-1-11:: 
 - switch, 4.10*Note Section 4-10::, 8.2.6*Note Subsection 8-2-6:: 
 - symlink, 9.5.7*Note Subsection 9-5-7:: 
 - system, 8.3.37*Note Subsection 8-3-37:: 
 
 - TARGETS, 8.1*Note Section 8-1:: 
 - Target, 11.1.11*Note Subsection 11-1-11:: 
 - TETEX2_ENABLED, 12.7.1*Note Subsection 12-7-1:: 
 - TEXDEPS, 12.7.2.1*Note Subsection 12-7-2:: 
 - TEXINPUTS, 12.7.2.1*Note Subsection 12-7-2:: 
 - TEXVARS, 12.7.2.1*Note Subsection 12-7-2:: 
 - TeXGeneratedFiles, 12.7.2.2*Note Subsection 12-7-2:: 
 - TryCompileC, 13.1.4*Note Subsection 13-1-4:: 
 - TryLinkC, 13.1.4*Note Subsection 13-1-4:: 
 - TryRunC, 13.1.4*Note Subsection 13-1-4:: 
 - target, 12.3.2*Note Subsection 12-3-2:: 
 - target-exists, 9.3.1*Note Subsection 9-3-1:: 
 - target-is-proper, 9.3.1*Note Subsection 9-3-1:: 
 - tell, 9.8.10*Note Subsection 9-8-10:: 
 - test, 9.7.1*Note Subsection 9-7-1:: 
 - tmpfile, 9.1.2*Note Subsection 9-1-2:: 
 - truncate, 9.5.11*Note Subsection 9-5-11:: 
 - try, 8.2.7*Note Subsection 8-2-7::, B.2.2.1*Note Subsection B-2-2:: 
 
 - UnbuildableException, 11.1.22*Note Subsection 11-1-22:: 
 - USE_OCAMLFIND, 12.6.2*Note Subsection 12-6-2:: 
 - USEPDFLATEX, 12.7.1*Note Subsection 12-7-1:: 
 - USER, 8.1*Note Section 8-1:: 
 - uge, 8.4.4*Note Subsection 8-4-4:: 
 - ugt, 8.4.4*Note Subsection 8-4-4:: 
 - ule, 8.4.4*Note Subsection 8-4-4:: 
 - ult, 8.4.4*Note Subsection 8-4-4:: 
 - umask, 9.5.12*Note Subsection 9-5-12:: 
 - uncapitalize, 8.3.34*Note Subsection 8-3-34:: 
 - unlink, 9.5.4*Note Subsection 9-5-4:: 
 - unsetenv, 8.2.14*Note Subsection 8-2-14:: 
 - uppercase, 8.3.35*Note Subsection 8-3-35:: 
 
 - VERBOSE, 8.1*Note Section 8-1:: 
 - VerboseCheckCHeader, 13.1.6*Note Subsection 13-1-6:: 
 - VerboseCheckCLib, 13.1.7*Note Subsection 13-1-7:: 
 - value, 4.5*Note Section 4-5::, B.2.2.1*Note Subsection B-2-2:: 
 - variable definition, A.3.21*Note Subsection A-3-21:: 
 - vmount, 2.9*Note Section 2-9::, 9.6.1*Note Subsection 9-6-1:: 
 
 - wait, 10.10.5*Note Subsection 10-10-5:: 
 - where, 9.2.2*Note Subsection 9-2-2:: 
 - which, 9.2.1*Note Subsection 9-2-1:: 
 - while, 8.3.40*Note Subsection 8-3-40::,
   B.2.2.1*Note Subsection B-2-2:: 
 - write, 9.8.7*Note Subsection 9-8-7:: 
 
 - YACC, 12.5.2*Note Subsection 12-5-2:: 
     
