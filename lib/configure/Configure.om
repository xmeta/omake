#
# Configuration utilities
#

#
# Check whether a header file exists.
# We call the C compiler.
#
public.CheckHeader(files) =
    private.includes = $(add-wrapper $(nl)$'#include <', >, $(files))

    # The command line
    protected.tmp = $(tmpfile omake)
    protected.command = $(CC) $(CFLAGS) $(PREFIXED_INCLUDES) -o $(tmp) $(tmp).c

    # The program
    protected.program = $"""/* Configuration file; you can remove this. */
/* Command line: $(command) */
#ifdef __cplusplus
extern "C"
#endif
#include <stdio.h>
$(includes)
int main(int argc, char **argv) {
    return 0;
}
"""

    # Compile it
    fprint($(tmp).c, $(program))
    protected.success = $(shell-success-null $(command))

    # Remove temporaries
    rm -f $(tmp).c $(tmp)$(EXT_OBJ) $(tmp)$(EXE)

    return $(success)

public.VerboseCheckHeader(files) =
    print(--- Testing for $(files)... )
    protected.success = $(CheckHeader $(files))
    if $(success)
        println($'(success)')
    else
        println($'(failed)')
    return $(success)

#
# Check whether the libraries have the given functions
#
public.CheckLib(libs, funs) =
    protected.declares = $(add-wrapper $(nl)extern char , $'();', $(funs))
    protected.funs = $(add-wrapper $(nl)    , $'();', $(funs))
    protected.clibs = $(addprefix -l, $(libs))

    # The command line
    protected.tmp = $(tmpfile omake)
    protected.command = $(CC) $(CFLAGS) $(PREFIXED_INCLUDES) -o $(tmp) $(tmp).c $(clibs)

    # The program
    protected.program = $"""/* Configuration file, you can remove this. */
/* command line: $(command) */
/* Override any gcc2 internal prototype to avoid an error.  */
#ifdef __cplusplus
extern "C"
#endif
$(declares)
int main(int argc, char **argv) {
$(funs)
    return 0;
}
"""

    # Compile it
    fprint($(tmp).c, $(program))
    protected.success = $(shell-success-null $(command))

    # Remove temporaries
    rm -f $(tmp).c $(tmp)$(EXT_OBJ) $(tmp)$(EXE)

    return $(success)

#
# Check whether a program exists in the PATH
#
public.CheckProg(prog) =
   print($"--- Testing for $(prog)... ")
   if $(where $(prog))
      println($"($(prog) found)")
      return true
   else
      println($"(FAILED - no $(prog) found)")
      return false
